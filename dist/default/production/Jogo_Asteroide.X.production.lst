

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jun 10 13:19:31 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 2.10
    30                           ; Generated 31/07/2019 GMT
    31                           ; 
    32                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4520 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  00774A                     __pidataCOMRAM:
    66                           	opt callstack 0
    67                           
    68                           ;initializer for creditos@F3056
    69  00774A  31                 	db	49
    70  00774B  2E                 	db	46
    71  00774C  44                 	db	68
    72  00774D  49                 	db	73
    73  00774E  4F                 	db	79
    74  00774F  47                 	db	71
    75  007750  4F                 	db	79
    76  007751  20                 	db	32
    77  007752  4D                 	db	77
    78  007753  41                 	db	65
    79  007754  52                 	db	82
    80  007755  43                 	db	67
    81  007756  48                 	db	72
    82  007757  49                 	db	73
    83  007758  00                 	db	0
    84  007759  00                 	db	0
    85                           
    86                           	psect	idataBANK0
    87  00795A                     __pidataBANK0:
    88                           	opt callstack 0
    89                           
    90                           ;initializer for menu@F3107
    91  00795A  33                 	db	51
    92  00795B  2E                 	db	46
    93  00795C  43                 	db	67
    94  00795D  52                 	db	82
    95  00795E  45                 	db	69
    96  00795F  44                 	db	68
    97  007960  49                 	db	73
    98  007961  54                 	db	84
    99  007962  4F                 	db	79
   100  007963  53                 	db	83
   101  007964  00                 	db	0
   102  007965  00                 	db	0
   103  007966  00                 	db	0
   104  007967  00                 	db	0
   105  007968  00                 	db	0
   106  007969  00                 	db	0
   107                           
   108                           ;initializer for menu@F3104
   109  00796A  32                 	db	50
   110  00796B  2E                 	db	46
   111  00796C  49                 	db	73
   112  00796D  4E                 	db	78
   113  00796E  53                 	db	83
   114  00796F  54                 	db	84
   115  007970  52                 	db	82
   116  007971  55                 	db	85
   117  007972  43                 	db	67
   118  007973  4F                 	db	79
   119  007974  45                 	db	69
   120  007975  53                 	db	83
   121  007976  00                 	db	0
   122  007977  00                 	db	0
   123  007978  00                 	db	0
   124  007979  00                 	db	0
   125                           
   126                           ;initializer for menu@F3101
   127  00797A  31                 	db	49
   128  00797B  2E                 	db	46
   129  00797C  4A                 	db	74
   130  00797D  4F                 	db	79
   131  00797E  47                 	db	71
   132  00797F  41                 	db	65
   133  007980  52                 	db	82
   134  007981  00                 	db	0
   135  007982  00                 	db	0
   136  007983  00                 	db	0
   137  007984  00                 	db	0
   138  007985  00                 	db	0
   139  007986  00                 	db	0
   140  007987  00                 	db	0
   141  007988  00                 	db	0
   142  007989  00                 	db	0
   143                           
   144                           ;initializer for instrucoes@F3092
   145  00798A  50                 	db	80
   146  00798B  52                 	db	82
   147  00798C  4F                 	db	79
   148  00798D  20                 	db	32
   149  00798E  4D                 	db	77
   150  00798F  45                 	db	69
   151  007990  4E                 	db	78
   152  007991  55                 	db	85
   153  007992  00                 	db	0
   154  007993  00                 	db	0
   155  007994  00                 	db	0
   156  007995  00                 	db	0
   157  007996  00                 	db	0
   158  007997  00                 	db	0
   159  007998  00                 	db	0
   160  007999  00                 	db	0
   161                           
   162                           ;initializer for instrucoes@F3089
   163  00799A  32                 	db	50
   164  00799B  2E                 	db	46
   165  00799C  45                 	db	69
   166  00799D  53                 	db	83
   167  00799E  43                 	db	67
   168  00799F  41                 	db	65
   169  0079A0  50                 	db	80
   170  0079A1  45                 	db	69
   171  0079A2  20                 	db	32
   172  0079A3  56                 	db	86
   173  0079A4  4F                 	db	79
   174  0079A5  4C                 	db	76
   175  0079A6  54                 	db	84
   176  0079A7  41                 	db	65
   177  0079A8  00                 	db	0
   178  0079A9  00                 	db	0
   179                           
   180                           ;initializer for instrucoes@F3086
   181  0079AA  4E                 	db	78
   182  0079AB  41                 	db	65
   183  0079AC  56                 	db	86
   184  0079AD  45                 	db	69
   185  0079AE  00                 	db	0
   186  0079AF  00                 	db	0
   187  0079B0  00                 	db	0
   188  0079B1  00                 	db	0
   189  0079B2  00                 	db	0
   190  0079B3  00                 	db	0
   191  0079B4  00                 	db	0
   192  0079B5  00                 	db	0
   193  0079B6  00                 	db	0
   194  0079B7  00                 	db	0
   195  0079B8  00                 	db	0
   196  0079B9  00                 	db	0
   197                           
   198                           ;initializer for instrucoes@F3083
   199  0079BA  31                 	db	49
   200  0079BB  2E                 	db	46
   201  0079BC  53                 	db	83
   202  0079BD  45                 	db	69
   203  0079BE  54                 	db	84
   204  0079BF  41                 	db	65
   205  0079C0  53                 	db	83
   206  0079C1  20                 	db	32
   207  0079C2  4D                 	db	77
   208  0079C3  4F                 	db	79
   209  0079C4  56                 	db	86
   210  0079C5  45                 	db	69
   211  0079C6  4D                 	db	77
   212  0079C7  20                 	db	32
   213  0079C8  41                 	db	65
   214  0079C9  00                 	db	0
   215                           
   216                           ;initializer for creditos@F3059
   217  0079CA  32                 	db	50
   218  0079CB  2E                 	db	46
   219  0079CC  47                 	db	71
   220  0079CD  45                 	db	69
   221  0079CE  4F                 	db	79
   222  0079CF  52                 	db	82
   223  0079D0  47                 	db	71
   224  0079D1  45                 	db	69
   225  0079D2  20                 	db	32
   226  0079D3  4E                 	db	78
   227  0079D4  41                 	db	65
   228  0079D5  52                 	db	82
   229  0079D6  44                 	db	68
   230  0079D7  45                 	db	69
   231  0079D8  53                 	db	83
   232  0079D9  00                 	db	0
   233                           
   234                           	psect	idataBANK1
   235  00773A                     __pidataBANK1:
   236                           	opt callstack 0
   237                           
   238                           ;initializer for menu@F3110
   239  00773A  34                 	db	52
   240  00773B  2E                 	db	46
   241  00773C  46                 	db	70
   242  00773D  49                 	db	73
   243  00773E  4E                 	db	78
   244  00773F  41                 	db	65
   245  007740  4C                 	db	76
   246  007741  49                 	db	73
   247  007742  5A                 	db	90
   248  007743  41                 	db	65
   249  007744  52                 	db	82
   250  007745  00                 	db	0
   251  007746  00                 	db	0
   252  007747  00                 	db	0
   253  007748  00                 	db	0
   254  007749  00                 	db	0
   255                           
   256                           	psect	nvCOMRAM
   257  000076                     __pnvCOMRAM:
   258                           	opt callstack 0
   259  000076                     _lcd:
   260                           	opt callstack 0
   261  000076                     	ds	2
   262  0000                     _TMR0	set	4054
   263  0000                     _PORTBbits	set	3969
   264  0000                     _T0CONbits	set	4053
   265  0000                     _TRISD	set	3989
   266  0000                     _ADCON1	set	4033
   267  0000                     _TRISB	set	3987
   268  0000                     _INTCONbits	set	4082
   269  0000                     _CMCON	set	4020
   270  0000                     _PORTD	set	3971
   271                           
   272                           ; #config settings
   273  0000                     
   274                           	psect	cinit
   275  00787C                     __pcinit:
   276                           	opt callstack 0
   277  00787C                     start_initialization:
   278                           	opt callstack 0
   279  00787C                     __initialization:
   280                           	opt callstack 0
   281                           
   282                           ; Initialize objects allocated to BANK1 (16 bytes)
   283                           ; load TBLPTR registers with __pidataBANK1
   284  00787C  0E3A               	movlw	low __pidataBANK1
   285  00787E  6EF6               	movwf	tblptrl,c
   286  007880  0E77               	movlw	high __pidataBANK1
   287  007882  6EF7               	movwf	tblptrh,c
   288  007884  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   289  007886  6EF8               	movwf	tblptru,c
   290  007888  EE01  F000         	lfsr	0,__pdataBANK1
   291  00788C  EE10 F010          	lfsr	1,16
   292  007890                     copy_data0:
   293  007890  0009               	tblrd		*+
   294  007892  CFF5 FFEE          	movff	tablat,postinc0
   295  007896  50E5               	movf	postdec1,w,c
   296  007898  50E1               	movf	fsr1l,w,c
   297  00789A  E1FA               	bnz	copy_data0
   298                           
   299                           ; Initialize objects allocated to BANK0 (128 bytes)
   300                           ; load TBLPTR registers with __pidataBANK0
   301  00789C  0E5A               	movlw	low __pidataBANK0
   302  00789E  6EF6               	movwf	tblptrl,c
   303  0078A0  0E79               	movlw	high __pidataBANK0
   304  0078A2  6EF7               	movwf	tblptrh,c
   305  0078A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   306  0078A6  6EF8               	movwf	tblptru,c
   307  0078A8  EE00  F080         	lfsr	0,__pdataBANK0
   308  0078AC  EE10 F080          	lfsr	1,128
   309  0078B0                     copy_data1:
   310  0078B0  0009               	tblrd		*+
   311  0078B2  CFF5 FFEE          	movff	tablat,postinc0
   312  0078B6  50E5               	movf	postdec1,w,c
   313  0078B8  50E1               	movf	fsr1l,w,c
   314  0078BA  E1FA               	bnz	copy_data1
   315                           
   316                           ; Initialize objects allocated to COMRAM (16 bytes)
   317                           ; load TBLPTR registers with __pidataCOMRAM
   318  0078BC  0E4A               	movlw	low __pidataCOMRAM
   319  0078BE  6EF6               	movwf	tblptrl,c
   320  0078C0  0E77               	movlw	high __pidataCOMRAM
   321  0078C2  6EF7               	movwf	tblptrh,c
   322  0078C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   323  0078C6  6EF8               	movwf	tblptru,c
   324  0078C8  EE00  F066         	lfsr	0,__pdataCOMRAM
   325  0078CC  EE10 F010          	lfsr	1,16
   326  0078D0                     copy_data2:
   327  0078D0  0009               	tblrd		*+
   328  0078D2  CFF5 FFEE          	movff	tablat,postinc0
   329  0078D6  50E5               	movf	postdec1,w,c
   330  0078D8  50E1               	movf	fsr1l,w,c
   331  0078DA  E1FA               	bnz	copy_data2
   332  0078DC                     end_of_initialization:
   333                           	opt callstack 0
   334  0078DC                     __end_of__initialization:
   335                           	opt callstack 0
   336  0078DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   337  0078DE  6EF8               	movwf	tblptru,c
   338  0078E0  0100               	movlb	0
   339  0078E2  EF2F  F03D         	goto	_main	;jump to C main() function
   340                           
   341                           	psect	dataCOMRAM
   342  000066                     __pdataCOMRAM:
   343                           	opt callstack 0
   344  000066                     creditos@F3056:
   345                           	opt callstack 0
   346  000066                     	ds	16
   347                           
   348                           	psect	dataBANK0
   349  000080                     __pdataBANK0:
   350                           	opt callstack 0
   351  000080                     menu@F3107:
   352                           	opt callstack 0
   353  000080                     	ds	16
   354  000090                     menu@F3104:
   355                           	opt callstack 0
   356  000090                     	ds	16
   357  0000A0                     menu@F3101:
   358                           	opt callstack 0
   359  0000A0                     	ds	16
   360  0000B0                     instrucoes@F3092:
   361                           	opt callstack 0
   362  0000B0                     	ds	16
   363  0000C0                     instrucoes@F3089:
   364                           	opt callstack 0
   365  0000C0                     	ds	16
   366  0000D0                     instrucoes@F3086:
   367                           	opt callstack 0
   368  0000D0                     	ds	16
   369  0000E0                     instrucoes@F3083:
   370                           	opt callstack 0
   371  0000E0                     	ds	16
   372  0000F0                     creditos@F3059:
   373                           	opt callstack 0
   374  0000F0                     	ds	16
   375                           
   376                           	psect	dataBANK1
   377  000100                     __pdataBANK1:
   378                           	opt callstack 0
   379  000100                     menu@F3110:
   380                           	opt callstack 0
   381  000100                     	ds	16
   382                           
   383                           	psect	cstackCOMRAM
   384  000001                     __pcstackCOMRAM:
   385                           	opt callstack 0
   386  000001                     ?_strlen:
   387                           	opt callstack 0
   388  000001                     pulso@lcd:
   389                           	opt callstack 0
   390  000001                     strlen@s:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0x0
   394  000001                     	ds	2
   395  000003                     ??_pulso:
   396  000003                     strlen@a:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x2
   400  000003                     	ds	1
   401  000004                     function_set@lcd:
   402                           	opt callstack 0
   403  000004                     display_onoff_control@lcd:
   404                           	opt callstack 0
   405  000004                     lcd_cmd@lcd:
   406                           	opt callstack 0
   407  000004                     entry_mode_set@lcd:
   408                           	opt callstack 0
   409  000004                     write_char@lcd:
   410                           	opt callstack 0
   411  000004                     clear_display@lcd:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0x3
   415  000004                     	ds	2
   416  000006                     ??_clear_display:
   417  000006                     function_set@data_lenght:
   418                           	opt callstack 0
   419  000006                     display_onoff_control@display_on:
   420                           	opt callstack 0
   421  000006                     lcd_cmd@a:
   422                           	opt callstack 0
   423  000006                     entry_mode_set@move_direction:
   424                           	opt callstack 0
   425  000006                     write_char@c:
   426                           	opt callstack 0
   427                           
   428                           ; 1 bytes @ 0x5
   429  000006                     	ds	1
   430  000007                     ??_write_char:
   431  000007                     ??_lcd_cmd:
   432  000007                     function_set@num_lines:
   433                           	opt callstack 0
   434  000007                     display_onoff_control@cursor_on:
   435                           	opt callstack 0
   436  000007                     entry_mode_set@display_shift:
   437                           	opt callstack 0
   438                           
   439                           ; 1 bytes @ 0x6
   440  000007                     	ds	1
   441  000008                     ??_entry_mode_set:
   442  000008                     function_set@char_font:
   443                           	opt callstack 0
   444  000008                     display_onoff_control@blink:
   445                           	opt callstack 0
   446  000008                     goto_XY@lcd:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x7
   450  000008                     	ds	1
   451  000009                     ??_function_set:
   452  000009                     ??_display_onoff_control:
   453                           
   454                           ; 1 bytes @ 0x8
   455  000009                     	ds	1
   456  00000A                     goto_XY@x:
   457                           	opt callstack 0
   458                           
   459                           ; 1 bytes @ 0x9
   460  00000A                     	ds	1
   461  00000B                     goto_XY@y:
   462                           	opt callstack 0
   463                           
   464                           ; 1 bytes @ 0xA
   465  00000B                     	ds	1
   466  00000C                     ??_goto_XY:
   467                           
   468                           ; 1 bytes @ 0xB
   469  00000C                     	ds	1
   470  00000D                     goto_XY@z:
   471                           	opt callstack 0
   472                           
   473                           ; 1 bytes @ 0xC
   474  00000D                     	ds	1
   475  00000E                     goto_XY@a:
   476                           	opt callstack 0
   477                           
   478                           ; 1 bytes @ 0xD
   479  00000E                     	ds	1
   480  00000F                     goto_XY@temp:
   481                           	opt callstack 0
   482                           
   483                           ; 1 bytes @ 0xE
   484  00000F                     	ds	1
   485  000010                     ??_le_entrada:
   486  000010                     menu@lcd:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0xF
   490  000010                     	ds	2
   491  000012                     ??_menu:
   492                           
   493                           ; 1 bytes @ 0x11
   494  000012                     	ds	2
   495  000014                     menu@palavra:
   496                           	opt callstack 0
   497                           
   498                           ; 16 bytes @ 0x13
   499  000014                     	ds	16
   500  000024                     menu@palavra2:
   501                           	opt callstack 0
   502                           
   503                           ; 16 bytes @ 0x23
   504  000024                     	ds	16
   505  000034                     menu@palavra3:
   506                           	opt callstack 0
   507                           
   508                           ; 16 bytes @ 0x33
   509  000034                     	ds	16
   510  000044                     menu@palavra4:
   511                           	opt callstack 0
   512                           
   513                           ; 16 bytes @ 0x43
   514  000044                     	ds	16
   515  000054                     menu@tamanho:
   516                           	opt callstack 0
   517                           
   518                           ; 2 bytes @ 0x53
   519  000054                     	ds	2
   520  000056                     menu@tamanho2:
   521                           	opt callstack 0
   522                           
   523                           ; 2 bytes @ 0x55
   524  000056                     	ds	2
   525  000058                     menu@tamanho3:
   526                           	opt callstack 0
   527                           
   528                           ; 2 bytes @ 0x57
   529  000058                     	ds	2
   530  00005A                     menu@tamanho4:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x59
   534  00005A                     	ds	4
   535  00005E                     menu@i:
   536                           	opt callstack 0
   537                           
   538                           ; 2 bytes @ 0x5D
   539  00005E                     	ds	2
   540  000060                     menu@i_264:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x5F
   544  000060                     	ds	2
   545  000062                     menu@i_265:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x61
   549  000062                     	ds	2
   550  000064                     menu@i_266:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x63
   554  000064                     	ds	2
   555  000066                     
   556                           ; 1 bytes @ 0x65
   557 ;;
   558 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   559 ;;
   560 ;; *************** function _main *****************
   561 ;; Defined at:
   562 ;;		line 36 in file "main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   576 ;;      Params:         0       0       0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels required when called:    4
   582 ;; This function calls:
   583 ;;		_display_onoff_control
   584 ;;		_entry_mode_set
   585 ;;		_function_set
   586 ;;		_le_entrada
   587 ;;		_menu
   588 ;; This function is called by:
   589 ;;		Startup code after reset
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text0
   594  007A5E                     __ptext0:
   595                           	opt callstack 0
   596  007A5E                     _main:
   597                           	opt callstack 27
   598  007A5E                     
   599                           ;main.c: 37:     CMCON = 0x07;
   600  007A5E  0E07               	movlw	7
   601  007A60  6EB4               	movwf	180,c	;volatile
   602  007A62                     
   603                           ;main.c: 38:     INTCONbits.PEIE = 0x01;
   604  007A62  8CF2               	bsf	242,6,c	;volatile
   605  007A64                     
   606                           ;main.c: 39:     INTCONbits.T0IE = 0x01;
   607  007A64  8AF2               	bsf	242,5,c	;volatile
   608                           
   609                           ;main.c: 41:     TMR0 = 0x6C;
   610  007A66  0E00               	movlw	0
   611  007A68  6ED7               	movwf	215,c	;volatile
   612  007A6A  0E6C               	movlw	108
   613  007A6C  6ED6               	movwf	214,c	;volatile
   614                           
   615                           ;main.c: 42:     TRISB = 0x0F;
   616  007A6E  0E0F               	movlw	15
   617  007A70  6E93               	movwf	147,c	;volatile
   618                           
   619                           ;main.c: 44:     ADCON1 = 0x0F;
   620  007A72  0E0F               	movlw	15
   621  007A74  6EC1               	movwf	193,c	;volatile
   622                           
   623                           ;main.c: 45:     TRISD = 0x00;
   624  007A76  0E00               	movlw	0
   625  007A78  6E95               	movwf	149,c	;volatile
   626  007A7A                     
   627                           ;main.c: 46:     INTCONbits.GIE = 1;
   628  007A7A  8EF2               	bsf	242,7,c	;volatile
   629  007A7C                     
   630                           ;main.c: 48:     lcd = &PORTD;
   631  007A7C  0E83               	movlw	131
   632  007A7E  6E76               	movwf	_lcd^0,c
   633  007A80  0E0F               	movlw	15
   634  007A82  6E77               	movwf	(_lcd+1)^0,c
   635  007A84                     
   636                           ;main.c: 50:     function_set(lcd, 0, 1, 0);
   637  007A84  C076  F004         	movff	_lcd,function_set@lcd
   638  007A88  C077  F005         	movff	_lcd+1,function_set@lcd+1
   639  007A8C  0E00               	movlw	0
   640  007A8E  6E06               	movwf	function_set@data_lenght^0,c
   641  007A90  0E01               	movlw	1
   642  007A92  6E07               	movwf	function_set@num_lines^0,c
   643  007A94  0E00               	movlw	0
   644  007A96  6E08               	movwf	function_set@char_font^0,c
   645  007A98  EC62  F03E         	call	_function_set	;wreg free
   646  007A9C                     
   647                           ;main.c: 51:     display_onoff_control(lcd, 1, 1, 0);
   648  007A9C  C076  F004         	movff	_lcd,display_onoff_control@lcd
   649  007AA0  C077  F005         	movff	_lcd+1,display_onoff_control@lcd+1
   650  007AA4  0E01               	movlw	1
   651  007AA6  6E06               	movwf	display_onoff_control@display_on^0,c
   652  007AA8  0E01               	movlw	1
   653  007AAA  6E07               	movwf	display_onoff_control@cursor_on^0,c
   654  007AAC  0E00               	movlw	0
   655  007AAE  6E08               	movwf	display_onoff_control@blink^0,c
   656  007AB0  EC71  F03D         	call	_display_onoff_control	;wreg free
   657  007AB4                     
   658                           ;main.c: 52:     entry_mode_set(lcd, 1,0);
   659  007AB4  C076  F004         	movff	_lcd,entry_mode_set@lcd
   660  007AB8  C077  F005         	movff	_lcd+1,entry_mode_set@lcd+1
   661  007ABC  0E01               	movlw	1
   662  007ABE  6E06               	movwf	entry_mode_set@move_direction^0,c
   663  007AC0  0E00               	movlw	0
   664  007AC2  6E07               	movwf	entry_mode_set@display_shift^0,c
   665  007AC4  ECED  F03C         	call	_entry_mode_set	;wreg free
   666  007AC8                     
   667                           ;main.c: 53:     T0CONbits.TMR0ON = 1;
   668  007AC8  8ED5               	bsf	213,7,c	;volatile
   669  007ACA                     
   670                           ;main.c: 54:     menu(lcd);
   671  007ACA  C076  F010         	movff	_lcd,menu@lcd
   672  007ACE  C077  F011         	movff	_lcd+1,menu@lcd+1
   673  007AD2  ECCF  F03E         	call	_menu	;wreg free
   674  007AD6                     l1544:
   675                           
   676                           ;main.c: 58:         le_entrada();
   677  007AD6  EC09  F03C         	call	_le_entrada	;wreg free
   678  007ADA  EF6B  F03D         	goto	l1544
   679  007ADE  EF00  F000         	goto	start
   680  007AE2                     __end_of_main:
   681                           	opt callstack 0
   682                           
   683 ;; *************** function _menu *****************
   684 ;; Defined at:
   685 ;;		line 113 in file "funcionamento.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;  lcd             2   15[COMRAM] PTR struct .
   688 ;;		 -> NULL(0), PORTD(1), 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  i               2   99[COMRAM] int 
   691 ;;  i               2   97[COMRAM] int 
   692 ;;  i               2   95[COMRAM] int 
   693 ;;  i               2   93[COMRAM] int 
   694 ;;  palavra4       16   67[COMRAM] unsigned char [16]
   695 ;;  palavra3       16   51[COMRAM] unsigned char [16]
   696 ;;  palavra2       16   35[COMRAM] unsigned char [16]
   697 ;;  palavra        16   19[COMRAM] unsigned char [16]
   698 ;;  opcao           2    0        int 
   699 ;;  tamanho4        2   89[COMRAM] int 
   700 ;;  tamanho3        2   87[COMRAM] int 
   701 ;;  tamanho2        2   85[COMRAM] int 
   702 ;;  tamanho         2   83[COMRAM] int 
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   712 ;;      Params:         2       0       0       0       0       0       0
   713 ;;      Locals:        82       0       0       0       0       0       0
   714 ;;      Temps:          2       0       0       0       0       0       0
   715 ;;      Totals:        86       0       0       0       0       0       0
   716 ;;Total ram usage:       86 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    3
   719 ;; This function calls:
   720 ;;		_clear_display
   721 ;;		_goto_XY
   722 ;;		_strlen
   723 ;;		_write_char
   724 ;; This function is called by:
   725 ;;		_main
   726 ;;		_creditos
   727 ;;		_instrucoes
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732  007D9E                     __ptext1:
   733                           	opt callstack 0
   734  007D9E                     _menu:
   735                           	opt callstack 27
   736  007D9E                     
   737                           ;funcionamento.c: 114:     char palavra[16] = "1.JOGAR";
   738  007D9E  EE20  F0A0         	lfsr	2,menu@F3101
   739  007DA2  EE10  F014         	lfsr	1,menu@palavra
   740  007DA6  0E0F               	movlw	15
   741  007DA8                     u401:
   742  007DA8  CFDB FFE3          	movff	plusw2,plusw1
   743  007DAC  06E8               	decf	wreg,f,c
   744  007DAE  E2FC               	bc	u401
   745  007DB0                     
   746                           ;funcionamento.c: 115:     int tamanho = (int)strlen(palavra);
   747  007DB0  0E14               	movlw	low menu@palavra
   748  007DB2  6E01               	movwf	strlen@s^0,c
   749  007DB4  0E00               	movlw	high menu@palavra
   750  007DB6  6E02               	movwf	(strlen@s+1)^0,c
   751  007DB8  ECAD  F03B         	call	_strlen	;wreg free
   752  007DBC  C001  F054         	movff	?_strlen,menu@tamanho
   753  007DC0  C002  F055         	movff	?_strlen+1,menu@tamanho+1
   754  007DC4                     
   755                           ;funcionamento.c: 117:     char palavra2[16] = "2.INSTRUCOES";
   756  007DC4  EE20  F090         	lfsr	2,menu@F3104
   757  007DC8  EE10  F024         	lfsr	1,menu@palavra2
   758  007DCC  0E0F               	movlw	15
   759  007DCE                     u411:
   760  007DCE  CFDB FFE3          	movff	plusw2,plusw1
   761  007DD2  06E8               	decf	wreg,f,c
   762  007DD4  E2FC               	bc	u411
   763                           
   764                           ;funcionamento.c: 118:     int tamanho2 = (int)strlen(palavra2);
   765  007DD6  0E24               	movlw	low menu@palavra2
   766  007DD8  6E01               	movwf	strlen@s^0,c
   767  007DDA  0E00               	movlw	high menu@palavra2
   768  007DDC  6E02               	movwf	(strlen@s+1)^0,c
   769  007DDE  ECAD  F03B         	call	_strlen	;wreg free
   770  007DE2  C001  F056         	movff	?_strlen,menu@tamanho2
   771  007DE6  C002  F057         	movff	?_strlen+1,menu@tamanho2+1
   772  007DEA                     
   773                           ;funcionamento.c: 120:     char palavra3[16] = "3.CREDITOS";
   774  007DEA  EE20  F080         	lfsr	2,menu@F3107
   775  007DEE  EE10  F034         	lfsr	1,menu@palavra3
   776  007DF2  0E0F               	movlw	15
   777  007DF4                     u421:
   778  007DF4  CFDB FFE3          	movff	plusw2,plusw1
   779  007DF8  06E8               	decf	wreg,f,c
   780  007DFA  E2FC               	bc	u421
   781  007DFC                     
   782                           ;funcionamento.c: 121:     int tamanho3 = (int)strlen(palavra3);
   783  007DFC  0E34               	movlw	low menu@palavra3
   784  007DFE  6E01               	movwf	strlen@s^0,c
   785  007E00  0E00               	movlw	high menu@palavra3
   786  007E02  6E02               	movwf	(strlen@s+1)^0,c
   787  007E04  ECAD  F03B         	call	_strlen	;wreg free
   788  007E08  C001  F058         	movff	?_strlen,menu@tamanho3
   789  007E0C  C002  F059         	movff	?_strlen+1,menu@tamanho3+1
   790                           
   791                           ;funcionamento.c: 123:     char palavra4[16] = "4.FINALIZAR";
   792  007E10  EE21  F000         	lfsr	2,menu@F3110
   793  007E14  EE10  F044         	lfsr	1,menu@palavra4
   794  007E18  0E0F               	movlw	15
   795  007E1A                     u431:
   796  007E1A  CFDB FFE3          	movff	plusw2,plusw1
   797  007E1E  06E8               	decf	wreg,f,c
   798  007E20  E2FC               	bc	u431
   799  007E22                     
   800                           ;funcionamento.c: 124:     int tamanho4 = (int)strlen(palavra4);
   801  007E22  0E44               	movlw	low menu@palavra4
   802  007E24  6E01               	movwf	strlen@s^0,c
   803  007E26  0E00               	movlw	high menu@palavra4
   804  007E28  6E02               	movwf	(strlen@s+1)^0,c
   805  007E2A  ECAD  F03B         	call	_strlen	;wreg free
   806  007E2E  C001  F05A         	movff	?_strlen,menu@tamanho4
   807  007E32  C002  F05B         	movff	?_strlen+1,menu@tamanho4+1
   808  007E36                     
   809                           ;funcionamento.c: 126:     goto_XY(lcd, 1, 1);
   810  007E36  C010  F008         	movff	menu@lcd,goto_XY@lcd
   811  007E3A  C011  F009         	movff	menu@lcd+1,goto_XY@lcd+1
   812  007E3E  0E01               	movlw	1
   813  007E40  6E0A               	movwf	goto_XY@x^0,c
   814  007E42  0E01               	movlw	1
   815  007E44  6E0B               	movwf	goto_XY@y^0,c
   816  007E46  EC04  F03E         	call	_goto_XY	;wreg free
   817  007E4A                     
   818                           ;funcionamento.c: 127:     for(int i = 0; i < tamanho; i ++)
   819  007E4A  0E00               	movlw	0
   820  007E4C  6E5F               	movwf	(menu@i+1)^0,c
   821  007E4E  0E00               	movlw	0
   822  007E50  6E5E               	movwf	menu@i^0,c
   823  007E52  EF3B  F03F         	goto	l1458
   824  007E56                     l1454:
   825                           
   826                           ;funcionamento.c: 128:         write_char(lcd, palavra[i]);
   827  007E56  C010  F004         	movff	menu@lcd,write_char@lcd
   828  007E5A  C011  F005         	movff	menu@lcd+1,write_char@lcd+1
   829  007E5E  0E14               	movlw	low menu@palavra
   830  007E60  245E               	addwf	menu@i^0,w,c
   831  007E62  6ED9               	movwf	fsr2l,c
   832  007E64  0E00               	movlw	high menu@palavra
   833  007E66  205F               	addwfc	(menu@i+1)^0,w,c
   834  007E68  6EDA               	movwf	fsr2h,c
   835  007E6A  50DF               	movf	indf2,w,c
   836  007E6C  6E06               	movwf	write_char@c^0,c
   837  007E6E  ECB8  F03D         	call	_write_char	;wreg free
   838  007E72  4A5E               	infsnz	menu@i^0,f,c
   839  007E74  2A5F               	incf	(menu@i+1)^0,f,c
   840  007E76                     l1458:
   841  007E76  5054               	movf	menu@tamanho^0,w,c
   842  007E78  5C5E               	subwf	menu@i^0,w,c
   843  007E7A  505F               	movf	(menu@i+1)^0,w,c
   844  007E7C  0A80               	xorlw	128
   845  007E7E  6E12               	movwf	??_menu^0,c
   846  007E80  5055               	movf	(menu@tamanho+1)^0,w,c
   847  007E82  0A80               	xorlw	128
   848  007E84  5812               	subwfb	??_menu^0,w,c
   849  007E86  A0D8               	btfss	status,0,c
   850  007E88  EF48  F03F         	goto	u441
   851  007E8C  EF4A  F03F         	goto	u440
   852  007E90                     u441:
   853  007E90  EF2B  F03F         	goto	l1454
   854  007E94                     u440:
   855  007E94                     
   856                           ;funcionamento.c: 130:     goto_XY(lcd, 2, 1);
   857  007E94  C010  F008         	movff	menu@lcd,goto_XY@lcd
   858  007E98  C011  F009         	movff	menu@lcd+1,goto_XY@lcd+1
   859  007E9C  0E02               	movlw	2
   860  007E9E  6E0A               	movwf	goto_XY@x^0,c
   861  007EA0  0E01               	movlw	1
   862  007EA2  6E0B               	movwf	goto_XY@y^0,c
   863  007EA4  EC04  F03E         	call	_goto_XY	;wreg free
   864  007EA8                     
   865                           ;funcionamento.c: 131:     for(int i = 0; i < tamanho2; i ++)
   866  007EA8  0E00               	movlw	0
   867  007EAA  6E61               	movwf	(menu@i_264+1)^0,c
   868  007EAC  0E00               	movlw	0
   869  007EAE  6E60               	movwf	menu@i_264^0,c
   870  007EB0  EF6A  F03F         	goto	l1468
   871  007EB4                     l1464:
   872                           
   873                           ;funcionamento.c: 132:         write_char(lcd, palavra2[i]);
   874  007EB4  C010  F004         	movff	menu@lcd,write_char@lcd
   875  007EB8  C011  F005         	movff	menu@lcd+1,write_char@lcd+1
   876  007EBC  0E24               	movlw	low menu@palavra2
   877  007EBE  2460               	addwf	menu@i_264^0,w,c
   878  007EC0  6ED9               	movwf	fsr2l,c
   879  007EC2  0E00               	movlw	high menu@palavra2
   880  007EC4  2061               	addwfc	(menu@i_264+1)^0,w,c
   881  007EC6  6EDA               	movwf	fsr2h,c
   882  007EC8  50DF               	movf	indf2,w,c
   883  007ECA  6E06               	movwf	write_char@c^0,c
   884  007ECC  ECB8  F03D         	call	_write_char	;wreg free
   885  007ED0  4A60               	infsnz	menu@i_264^0,f,c
   886  007ED2  2A61               	incf	(menu@i_264+1)^0,f,c
   887  007ED4                     l1468:
   888  007ED4  5056               	movf	menu@tamanho2^0,w,c
   889  007ED6  5C60               	subwf	menu@i_264^0,w,c
   890  007ED8  5061               	movf	(menu@i_264+1)^0,w,c
   891  007EDA  0A80               	xorlw	128
   892  007EDC  6E12               	movwf	??_menu^0,c
   893  007EDE  5057               	movf	(menu@tamanho2+1)^0,w,c
   894  007EE0  0A80               	xorlw	128
   895  007EE2  5812               	subwfb	??_menu^0,w,c
   896  007EE4  A0D8               	btfss	status,0,c
   897  007EE6  EF77  F03F         	goto	u451
   898  007EEA  EF79  F03F         	goto	u450
   899  007EEE                     u451:
   900  007EEE  EF5A  F03F         	goto	l1464
   901  007EF2                     u450:
   902  007EF2                     
   903                           ;funcionamento.c: 134:     goto_XY(lcd, 3, 1);
   904  007EF2  C010  F008         	movff	menu@lcd,goto_XY@lcd
   905  007EF6  C011  F009         	movff	menu@lcd+1,goto_XY@lcd+1
   906  007EFA  0E03               	movlw	3
   907  007EFC  6E0A               	movwf	goto_XY@x^0,c
   908  007EFE  0E01               	movlw	1
   909  007F00  6E0B               	movwf	goto_XY@y^0,c
   910  007F02  EC04  F03E         	call	_goto_XY	;wreg free
   911  007F06                     
   912                           ;funcionamento.c: 135:     for(int i = 0; i < tamanho3; i ++)
   913  007F06  0E00               	movlw	0
   914  007F08  6E63               	movwf	(menu@i_265+1)^0,c
   915  007F0A  0E00               	movlw	0
   916  007F0C  6E62               	movwf	menu@i_265^0,c
   917  007F0E  EF99  F03F         	goto	l1478
   918  007F12                     l1474:
   919                           
   920                           ;funcionamento.c: 136:         write_char(lcd, palavra3[i]);
   921  007F12  C010  F004         	movff	menu@lcd,write_char@lcd
   922  007F16  C011  F005         	movff	menu@lcd+1,write_char@lcd+1
   923  007F1A  0E34               	movlw	low menu@palavra3
   924  007F1C  2462               	addwf	menu@i_265^0,w,c
   925  007F1E  6ED9               	movwf	fsr2l,c
   926  007F20  0E00               	movlw	high menu@palavra3
   927  007F22  2063               	addwfc	(menu@i_265+1)^0,w,c
   928  007F24  6EDA               	movwf	fsr2h,c
   929  007F26  50DF               	movf	indf2,w,c
   930  007F28  6E06               	movwf	write_char@c^0,c
   931  007F2A  ECB8  F03D         	call	_write_char	;wreg free
   932  007F2E  4A62               	infsnz	menu@i_265^0,f,c
   933  007F30  2A63               	incf	(menu@i_265+1)^0,f,c
   934  007F32                     l1478:
   935  007F32  5058               	movf	menu@tamanho3^0,w,c
   936  007F34  5C62               	subwf	menu@i_265^0,w,c
   937  007F36  5063               	movf	(menu@i_265+1)^0,w,c
   938  007F38  0A80               	xorlw	128
   939  007F3A  6E12               	movwf	??_menu^0,c
   940  007F3C  5059               	movf	(menu@tamanho3+1)^0,w,c
   941  007F3E  0A80               	xorlw	128
   942  007F40  5812               	subwfb	??_menu^0,w,c
   943  007F42  A0D8               	btfss	status,0,c
   944  007F44  EFA6  F03F         	goto	u461
   945  007F48  EFA8  F03F         	goto	u460
   946  007F4C                     u461:
   947  007F4C  EF89  F03F         	goto	l1474
   948  007F50                     u460:
   949  007F50                     
   950                           ;funcionamento.c: 138:     goto_XY(lcd, 4, 1);
   951  007F50  C010  F008         	movff	menu@lcd,goto_XY@lcd
   952  007F54  C011  F009         	movff	menu@lcd+1,goto_XY@lcd+1
   953  007F58  0E04               	movlw	4
   954  007F5A  6E0A               	movwf	goto_XY@x^0,c
   955  007F5C  0E01               	movlw	1
   956  007F5E  6E0B               	movwf	goto_XY@y^0,c
   957  007F60  EC04  F03E         	call	_goto_XY	;wreg free
   958  007F64                     
   959                           ;funcionamento.c: 139:     for(int i = 0; i < tamanho4; i ++)
   960  007F64  0E00               	movlw	0
   961  007F66  6E65               	movwf	(menu@i_266+1)^0,c
   962  007F68  0E00               	movlw	0
   963  007F6A  6E64               	movwf	menu@i_266^0,c
   964  007F6C  EFC8  F03F         	goto	l1488
   965  007F70                     l1484:
   966                           
   967                           ;funcionamento.c: 140:         write_char(lcd, palavra4[i]);
   968  007F70  C010  F004         	movff	menu@lcd,write_char@lcd
   969  007F74  C011  F005         	movff	menu@lcd+1,write_char@lcd+1
   970  007F78  0E44               	movlw	low menu@palavra4
   971  007F7A  2464               	addwf	menu@i_266^0,w,c
   972  007F7C  6ED9               	movwf	fsr2l,c
   973  007F7E  0E00               	movlw	high menu@palavra4
   974  007F80  2065               	addwfc	(menu@i_266+1)^0,w,c
   975  007F82  6EDA               	movwf	fsr2h,c
   976  007F84  50DF               	movf	indf2,w,c
   977  007F86  6E06               	movwf	write_char@c^0,c
   978  007F88  ECB8  F03D         	call	_write_char	;wreg free
   979  007F8C  4A64               	infsnz	menu@i_266^0,f,c
   980  007F8E  2A65               	incf	(menu@i_266+1)^0,f,c
   981  007F90                     l1488:
   982  007F90  505A               	movf	menu@tamanho4^0,w,c
   983  007F92  5C64               	subwf	menu@i_266^0,w,c
   984  007F94  5065               	movf	(menu@i_266+1)^0,w,c
   985  007F96  0A80               	xorlw	128
   986  007F98  6E12               	movwf	??_menu^0,c
   987  007F9A  505B               	movf	(menu@tamanho4+1)^0,w,c
   988  007F9C  0A80               	xorlw	128
   989  007F9E  5812               	subwfb	??_menu^0,w,c
   990  007FA0  A0D8               	btfss	status,0,c
   991  007FA2  EFD5  F03F         	goto	u471
   992  007FA6  EFD7  F03F         	goto	u470
   993  007FAA                     u471:
   994  007FAA  EFB8  F03F         	goto	l1484
   995  007FAE                     u470:
   996  007FAE                     
   997                           ;funcionamento.c: 147:     switch(opcao){
   998  007FAE  EFE1  F03F         	goto	l1502
   999  007FB2                     l1492:
  1000                           
  1001                           ;funcionamento.c: 149:             clear_display(lcd);
  1002  007FB2  C010  F004         	movff	menu@lcd,clear_display@lcd
  1003  007FB6  C011  F005         	movff	menu@lcd+1,clear_display@lcd+1
  1004  007FBA  EC73  F03C         	call	_clear_display	;wreg free
  1005                           
  1006                           ;funcionamento.c: 151:             break;
  1007  007FBE  EFFF  F03F         	goto	l132
  1008  007FC2                     l1502:
  1009  007FC2  0E00               	movlw	0
  1010  007FC4  6E12               	movwf	??_menu^0,c
  1011  007FC6  0E00               	movlw	0
  1012  007FC8  6E13               	movwf	(??_menu+1)^0,c
  1013                           
  1014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1015                           ; Switch size 1, requested type "simple"
  1016                           ; Number of cases is 1, Range of values is 0 to 0
  1017                           ; switch strategies available:
  1018                           ; Name         Instructions Cycles
  1019                           ; simple_byte            4     3 (average)
  1020                           ;	Chosen strategy is simple_byte
  1021  007FCA  5013               	movf	(??_menu+1)^0,w,c
  1022  007FCC  0A00               	xorlw	0	; case 0
  1023  007FCE  B4D8               	btfsc	status,2,c
  1024  007FD0  EFEC  F03F         	goto	l1710
  1025  007FD4  EFFF  F03F         	goto	l132
  1026  007FD8                     l1710:
  1027                           
  1028                           ; Switch size 1, requested type "simple"
  1029                           ; Number of cases is 4, Range of values is 1 to 4
  1030                           ; switch strategies available:
  1031                           ; Name         Instructions Cycles
  1032                           ; simple_byte           13     7 (average)
  1033                           ;	Chosen strategy is simple_byte
  1034  007FD8  5012               	movf	??_menu^0,w,c
  1035  007FDA  0A01               	xorlw	1	; case 1
  1036  007FDC  B4D8               	btfsc	status,2,c
  1037  007FDE  EFD9  F03F         	goto	l1492
  1038  007FE2  0A03               	xorlw	3	; case 2
  1039  007FE4  B4D8               	btfsc	status,2,c
  1040  007FE6  EFD9  F03F         	goto	l1492
  1041  007FEA  0A01               	xorlw	1	; case 3
  1042  007FEC  B4D8               	btfsc	status,2,c
  1043  007FEE  EFD9  F03F         	goto	l1492
  1044  007FF2  0A07               	xorlw	7	; case 4
  1045  007FF4  B4D8               	btfsc	status,2,c
  1046  007FF6  EFD9  F03F         	goto	l1492
  1047  007FFA  EFFF  F03F         	goto	l132
  1048  007FFE                     l132:
  1049  007FFE  0012               	return		;funcret
  1050  008000                     __end_of_menu:
  1051                           	opt callstack 0
  1052                           
  1053 ;; *************** function _strlen *****************
  1054 ;; Defined at:
  1055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1058 ;;		 -> menu@palavra4(16), menu@palavra3(16), menu@palavra2(16), menu@palavra(16), 
  1059 ;;		 -> instrucoes@palavra4(16), instrucoes@palavra3(16), instrucoes@palavra2(16), instrucoes@palavra(16), 
  1060 ;;		 -> creditos@palavra2(16), creditos@palavra(16), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1063 ;;		 -> menu@palavra4(16), menu@palavra3(16), menu@palavra2(16), menu@palavra(16), 
  1064 ;;		 -> instrucoes@palavra4(16), instrucoes@palavra3(16), instrucoes@palavra2(16), instrucoes@palavra(16), 
  1065 ;;		 -> creditos@palavra2(16), creditos@palavra(16), 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  2    0[COMRAM] unsigned int 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         2       0       0       0       0       0       0
  1076 ;;      Locals:         2       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:         4       0       0       0       0       0       0
  1079 ;;Total ram usage:        4 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_menu
  1085 ;;		_creditos
  1086 ;;		_instrucoes
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text2
  1091  00775A                     __ptext2:
  1092                           	opt callstack 0
  1093  00775A                     _strlen:
  1094                           	opt callstack 29
  1095  00775A  C001  F003         	movff	strlen@s,strlen@a
  1096  00775E  C002  F004         	movff	strlen@s+1,strlen@a+1
  1097  007762  EFB5  F03B         	goto	l1308
  1098  007766                     l1306:
  1099  007766  4A01               	infsnz	strlen@s^0,f,c
  1100  007768  2A02               	incf	(strlen@s+1)^0,f,c
  1101  00776A                     l1308:
  1102  00776A  C001  FFD9         	movff	strlen@s,fsr2l
  1103  00776E  C002  FFDA         	movff	strlen@s+1,fsr2h
  1104  007772  50DF               	movf	indf2,w,c
  1105  007774  A4D8               	btfss	status,2,c
  1106  007776  EFBF  F03B         	goto	u351
  1107  00777A  EFC1  F03B         	goto	u350
  1108  00777E                     u351:
  1109  00777E  EFB3  F03B         	goto	l1306
  1110  007782                     u350:
  1111  007782  5003               	movf	strlen@a^0,w,c
  1112  007784  5C01               	subwf	strlen@s^0,w,c
  1113  007786  6E01               	movwf	?_strlen^0,c
  1114  007788  5004               	movf	(strlen@a+1)^0,w,c
  1115  00778A  5802               	subwfb	(strlen@s+1)^0,w,c
  1116  00778C  6E02               	movwf	(?_strlen+1)^0,c
  1117  00778E  0012               	return		;funcret
  1118  007790                     __end_of_strlen:
  1119                           	opt callstack 0
  1120                           
  1121 ;; *************** function _le_entrada *****************
  1122 ;; Defined at:
  1123 ;;		line 6 in file "keyboard.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1137 ;;      Params:         0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0
  1139 ;;      Temps:          2       0       0       0       0       0       0
  1140 ;;      Totals:         2       0       0       0       0       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    3
  1144 ;; This function calls:
  1145 ;;		_clear_display
  1146 ;;		_goto_XY
  1147 ;;		_write_char
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text3
  1154  007812                     __ptext3:
  1155                           	opt callstack 0
  1156  007812                     _le_entrada:
  1157                           	opt callstack 27
  1158  007812                     
  1159                           ;keyboard.c: 7:     clear_display(lcd);
  1160  007812  C076  F004         	movff	_lcd,clear_display@lcd
  1161  007816  C077  F005         	movff	_lcd+1,clear_display@lcd+1
  1162  00781A  EC73  F03C         	call	_clear_display	;wreg free
  1163  00781E                     
  1164                           ;keyboard.c: 8:     PORTBbits.RB0 = 1;
  1165  00781E  8081               	bsf	129,0,c	;volatile
  1166  007820                     
  1167                           ;keyboard.c: 10:     PORTBbits.RB1 = 0;
  1168  007820  9281               	bcf	129,1,c	;volatile
  1169  007822                     
  1170                           ;keyboard.c: 11:     PORTBbits.RB2 = 0;
  1171  007822  9481               	bcf	129,2,c	;volatile
  1172  007824                     
  1173                           ;keyboard.c: 12:     if(PORTBbits.RB4 == 1){
  1174  007824  A881               	btfss	129,4,c	;volatile
  1175  007826  EF17  F03C         	goto	u481
  1176  00782A  EF19  F03C         	goto	u480
  1177  00782E                     u481:
  1178  00782E  EF3D  F03C         	goto	l184
  1179  007832                     u480:
  1180  007832                     
  1181                           ;keyboard.c: 13:         goto_XY(lcd,3,1);
  1182  007832  C076  F008         	movff	_lcd,goto_XY@lcd
  1183  007836  C077  F009         	movff	_lcd+1,goto_XY@lcd+1
  1184  00783A  0E03               	movlw	3
  1185  00783C  6E0A               	movwf	goto_XY@x^0,c
  1186  00783E  0E01               	movlw	1
  1187  007840  6E0B               	movwf	goto_XY@y^0,c
  1188  007842  EC04  F03E         	call	_goto_XY	;wreg free
  1189                           
  1190                           ;keyboard.c: 14:        write_char(lcd,'<');
  1191  007846  C076  F004         	movff	_lcd,write_char@lcd
  1192  00784A  C077  F005         	movff	_lcd+1,write_char@lcd+1
  1193  00784E  0E3C               	movlw	60
  1194  007850  6E06               	movwf	write_char@c^0,c
  1195  007852  ECB8  F03D         	call	_write_char	;wreg free
  1196  007856                     
  1197                           ;keyboard.c: 15:        _delay((unsigned long)((1000)*(16000000/4000.0)));
  1198  007856  0E15               	movlw	21
  1199  007858  6E11               	movwf	(??_le_entrada+1)^0,c
  1200  00785A  0E4B               	movlw	75
  1201  00785C  6E10               	movwf	??_le_entrada^0,c
  1202  00785E  0EBE               	movlw	190
  1203  007860                     u697:
  1204  007860  2EE8               	decfsz	wreg,f,c
  1205  007862  D7FE               	bra	u697
  1206  007864  2E10               	decfsz	??_le_entrada^0,f,c
  1207  007866  D7FC               	bra	u697
  1208  007868  2E11               	decfsz	(??_le_entrada+1)^0,f,c
  1209  00786A  D7FA               	bra	u697
  1210  00786C  D000               	nop2	
  1211  00786E                     
  1212                           ;keyboard.c: 16:        clear_display(lcd);
  1213  00786E  C076  F004         	movff	_lcd,clear_display@lcd
  1214  007872  C077  F005         	movff	_lcd+1,clear_display@lcd+1
  1215  007876  EC73  F03C         	call	_clear_display	;wreg free
  1216  00787A                     l184:
  1217  00787A  0012               	return		;funcret
  1218  00787C                     __end_of_le_entrada:
  1219                           	opt callstack 0
  1220                           
  1221 ;; *************** function _write_char *****************
  1222 ;; Defined at:
  1223 ;;		line 137 in file "lcd.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  lcd             2    3[COMRAM] PTR struct .
  1226 ;;		 -> NULL(0), PORTD(1), 
  1227 ;;  c               1    5[COMRAM] unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1239 ;;      Params:         3       0       0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0
  1241 ;;      Temps:          1       0       0       0       0       0       0
  1242 ;;      Totals:         4       0       0       0       0       0       0
  1243 ;;Total ram usage:        4 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    1
  1246 ;; This function calls:
  1247 ;;		_pulso
  1248 ;; This function is called by:
  1249 ;;		_menu
  1250 ;;		_le_entrada
  1251 ;;		_creditos
  1252 ;;		_jogar
  1253 ;;		_instrucoes
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text4
  1258  007B70                     __ptext4:
  1259                           	opt callstack 0
  1260  007B70                     _write_char:
  1261                           	opt callstack 28
  1262  007B70                     
  1263                           ;lcd.c: 138:     lcd->E = 0;
  1264  007B70  C004  FFD9         	movff	write_char@lcd,fsr2l
  1265  007B74  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1266  007B78  94DF               	bcf	indf2,2,c
  1267                           
  1268                           ;lcd.c: 139:     lcd->RS = 1;
  1269  007B7A  C004  FFD9         	movff	write_char@lcd,fsr2l
  1270  007B7E  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1271  007B82  80DF               	bsf	indf2,0,c
  1272                           
  1273                           ;lcd.c: 140:     lcd->R_W = 0;
  1274  007B84  C004  FFD9         	movff	write_char@lcd,fsr2l
  1275  007B88  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1276  007B8C  92DF               	bcf	indf2,1,c
  1277  007B8E                     
  1278                           ;lcd.c: 143:     lcd->data = (c>>4);
  1279  007B8E  C006  F007         	movff	write_char@c,??_write_char
  1280  007B92  3A07               	swapf	??_write_char^0,f,c
  1281  007B94  0E0F               	movlw	15
  1282  007B96  1607               	andwf	??_write_char^0,f,c
  1283  007B98  C004  FFD9         	movff	write_char@lcd,fsr2l
  1284  007B9C  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1285  007BA0  3A07               	swapf	??_write_char^0,f,c
  1286  007BA2  50DF               	movf	indf2,w,c
  1287  007BA4  1807               	xorwf	??_write_char^0,w,c
  1288  007BA6  0B0F               	andlw	-241
  1289  007BA8  1807               	xorwf	??_write_char^0,w,c
  1290  007BAA  6EDF               	movwf	indf2,c
  1291  007BAC                     
  1292                           ;lcd.c: 144:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1293  007BAC  0E06               	movlw	6
  1294  007BAE  6E07               	movwf	??_write_char^0,c
  1295  007BB0  0E30               	movlw	48
  1296  007BB2                     u707:
  1297  007BB2  2EE8               	decfsz	wreg,f,c
  1298  007BB4  D7FE               	bra	u707
  1299  007BB6  2E07               	decfsz	??_write_char^0,f,c
  1300  007BB8  D7FC               	bra	u707
  1301  007BBA  D000               	nop2	
  1302  007BBC                     
  1303                           ;lcd.c: 146:     pulso(lcd);
  1304  007BBC  C004  F001         	movff	write_char@lcd,pulso@lcd
  1305  007BC0  C005  F002         	movff	write_char@lcd+1,pulso@lcd+1
  1306  007BC4  ECE8  F03B         	call	_pulso	;wreg free
  1307  007BC8                     
  1308                           ;lcd.c: 149:     lcd->data = (c);
  1309  007BC8  C006  F007         	movff	write_char@c,??_write_char
  1310  007BCC  C004  FFD9         	movff	write_char@lcd,fsr2l
  1311  007BD0  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1312  007BD4  3A07               	swapf	??_write_char^0,f,c
  1313  007BD6  50DF               	movf	indf2,w,c
  1314  007BD8  1807               	xorwf	??_write_char^0,w,c
  1315  007BDA  0B0F               	andlw	-241
  1316  007BDC  1807               	xorwf	??_write_char^0,w,c
  1317  007BDE  6EDF               	movwf	indf2,c
  1318  007BE0                     
  1319                           ;lcd.c: 150:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1320  007BE0  0E06               	movlw	6
  1321  007BE2  6E07               	movwf	??_write_char^0,c
  1322  007BE4  0E30               	movlw	48
  1323  007BE6                     u717:
  1324  007BE6  2EE8               	decfsz	wreg,f,c
  1325  007BE8  D7FE               	bra	u717
  1326  007BEA  2E07               	decfsz	??_write_char^0,f,c
  1327  007BEC  D7FC               	bra	u717
  1328  007BEE  D000               	nop2	
  1329  007BF0                     
  1330                           ;lcd.c: 152:     pulso(lcd);
  1331  007BF0  C004  F001         	movff	write_char@lcd,pulso@lcd
  1332  007BF4  C005  F002         	movff	write_char@lcd+1,pulso@lcd+1
  1333  007BF8  ECE8  F03B         	call	_pulso	;wreg free
  1334                           
  1335                           ;lcd.c: 153:     lcd->RS = 0;
  1336  007BFC  C004  FFD9         	movff	write_char@lcd,fsr2l
  1337  007C00  C005  FFDA         	movff	write_char@lcd+1,fsr2h
  1338  007C04  90DF               	bcf	indf2,0,c
  1339  007C06  0012               	return		;funcret
  1340  007C08                     __end_of_write_char:
  1341                           	opt callstack 0
  1342                           
  1343 ;; *************** function _goto_XY *****************
  1344 ;; Defined at:
  1345 ;;		line 79 in file "lcd.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  lcd             2    7[COMRAM] PTR struct .
  1348 ;;		 -> NULL(0), PORTD(1), 
  1349 ;;  x               1    9[COMRAM] unsigned char 
  1350 ;;  y               1   10[COMRAM] unsigned char 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  temp            1   14[COMRAM] unsigned char 
  1353 ;;  a               1   13[COMRAM] unsigned char 
  1354 ;;  z               1   12[COMRAM] unsigned char 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1364 ;;      Params:         4       0       0       0       0       0       0
  1365 ;;      Locals:         3       0       0       0       0       0       0
  1366 ;;      Temps:          1       0       0       0       0       0       0
  1367 ;;      Totals:         8       0       0       0       0       0       0
  1368 ;;Total ram usage:        8 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    2
  1371 ;; This function calls:
  1372 ;;		_lcd_cmd
  1373 ;; This function is called by:
  1374 ;;		_menu
  1375 ;;		_le_entrada
  1376 ;;		_creditos
  1377 ;;		_jogar
  1378 ;;		_instrucoes
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text5
  1383  007C08                     __ptext5:
  1384                           	opt callstack 0
  1385  007C08                     _goto_XY:
  1386                           	opt callstack 27
  1387  007C08                     
  1388                           ;lcd.c: 80:     unsigned char temp,z,a;;lcd.c: 81:     if(x == 1)
  1389  007C08  040A               	decf	goto_XY@x^0,w,c
  1390  007C0A  A4D8               	btfss	status,2,c
  1391  007C0C  EF0A  F03E         	goto	u361
  1392  007C10  EF0C  F03E         	goto	u360
  1393  007C14                     u361:
  1394  007C14  EF2E  F03E         	goto	l1326
  1395  007C18                     u360:
  1396  007C18                     
  1397                           ;lcd.c: 82:     {;lcd.c: 83:        temp = 0x80 + y - 1;
  1398  007C18  500B               	movf	goto_XY@y^0,w,c
  1399  007C1A  0F7F               	addlw	127
  1400  007C1C  6E0F               	movwf	goto_XY@temp^0,c
  1401                           
  1402                           ;lcd.c: 84:        z = temp>>4;
  1403  007C1E  380F               	swapf	goto_XY@temp^0,w,c
  1404  007C20  0B0F               	andlw	15
  1405  007C22  6E0D               	movwf	goto_XY@z^0,c
  1406  007C24                     l1318:
  1407                           
  1408                           ;lcd.c: 85:        a = temp;
  1409  007C24  C00F  F00E         	movff	goto_XY@temp,goto_XY@a
  1410  007C28                     
  1411                           ;lcd.c: 86:        lcd_cmd(lcd, z);
  1412  007C28  C008  F004         	movff	goto_XY@lcd,lcd_cmd@lcd
  1413  007C2C  C009  F005         	movff	goto_XY@lcd+1,lcd_cmd@lcd+1
  1414  007C30  C00D  F006         	movff	goto_XY@z,lcd_cmd@a
  1415  007C34  ECC8  F03B         	call	_lcd_cmd	;wreg free
  1416  007C38                     
  1417                           ;lcd.c: 87:        _delay((unsigned long)((1)*(16000000/4000.0)));
  1418  007C38  0E06               	movlw	6
  1419  007C3A  6E0C               	movwf	??_goto_XY^0,c
  1420  007C3C  0E30               	movlw	48
  1421  007C3E                     u727:
  1422  007C3E  2EE8               	decfsz	wreg,f,c
  1423  007C40  D7FE               	bra	u727
  1424  007C42  2E0C               	decfsz	??_goto_XY^0,f,c
  1425  007C44  D7FC               	bra	u727
  1426  007C46  D000               	nop2	
  1427  007C48                     
  1428                           ;lcd.c: 88:        lcd_cmd(lcd, a);
  1429  007C48  C008  F004         	movff	goto_XY@lcd,lcd_cmd@lcd
  1430  007C4C  C009  F005         	movff	goto_XY@lcd+1,lcd_cmd@lcd+1
  1431  007C50  C00E  F006         	movff	goto_XY@a,lcd_cmd@a
  1432  007C54  ECC8  F03B         	call	_lcd_cmd	;wreg free
  1433                           
  1434                           ;lcd.c: 89:     }
  1435  007C58  EF61  F03E         	goto	l156
  1436  007C5C                     l1326:
  1437  007C5C  0E02               	movlw	2
  1438  007C5E  180A               	xorwf	goto_XY@x^0,w,c
  1439  007C60  A4D8               	btfss	status,2,c
  1440  007C62  EF35  F03E         	goto	u371
  1441  007C66  EF37  F03E         	goto	u370
  1442  007C6A                     u371:
  1443  007C6A  EF3F  F03E         	goto	l1338
  1444  007C6E                     u370:
  1445  007C6E                     
  1446                           ;lcd.c: 91:     {;lcd.c: 92:        temp = 0xC0 + y - 1;
  1447  007C6E  500B               	movf	goto_XY@y^0,w,c
  1448  007C70  0FBF               	addlw	191
  1449  007C72  6E0F               	movwf	goto_XY@temp^0,c
  1450                           
  1451                           ;lcd.c: 93:        z = temp>>4;
  1452  007C74  380F               	swapf	goto_XY@temp^0,w,c
  1453  007C76  0B0F               	andlw	15
  1454  007C78  6E0D               	movwf	goto_XY@z^0,c
  1455  007C7A  EF12  F03E         	goto	l1318
  1456  007C7E                     l1338:
  1457  007C7E  0E03               	movlw	3
  1458  007C80  180A               	xorwf	goto_XY@x^0,w,c
  1459  007C82  A4D8               	btfss	status,2,c
  1460  007C84  EF46  F03E         	goto	u381
  1461  007C88  EF48  F03E         	goto	u380
  1462  007C8C                     u381:
  1463  007C8C  EF50  F03E         	goto	l1350
  1464  007C90                     u380:
  1465  007C90                     
  1466                           ;lcd.c: 100:     {;lcd.c: 101:        temp = 0x90 + y - 1;
  1467  007C90  500B               	movf	goto_XY@y^0,w,c
  1468  007C92  0F8F               	addlw	143
  1469  007C94  6E0F               	movwf	goto_XY@temp^0,c
  1470                           
  1471                           ;lcd.c: 102:        z = temp>>4;
  1472  007C96  380F               	swapf	goto_XY@temp^0,w,c
  1473  007C98  0B0F               	andlw	15
  1474  007C9A  6E0D               	movwf	goto_XY@z^0,c
  1475  007C9C  EF12  F03E         	goto	l1318
  1476  007CA0                     l1350:
  1477  007CA0  0E04               	movlw	4
  1478  007CA2  180A               	xorwf	goto_XY@x^0,w,c
  1479  007CA4  A4D8               	btfss	status,2,c
  1480  007CA6  EF57  F03E         	goto	u391
  1481  007CAA  EF59  F03E         	goto	u390
  1482  007CAE                     u391:
  1483  007CAE  EF61  F03E         	goto	l152
  1484  007CB2                     u390:
  1485  007CB2                     
  1486                           ;lcd.c: 109:     {;lcd.c: 110:        temp = 0xD0 + y - 1;
  1487  007CB2  500B               	movf	goto_XY@y^0,w,c
  1488  007CB4  0FCF               	addlw	207
  1489  007CB6  6E0F               	movwf	goto_XY@temp^0,c
  1490                           
  1491                           ;lcd.c: 111:        z = temp>>4;
  1492  007CB8  380F               	swapf	goto_XY@temp^0,w,c
  1493  007CBA  0B0F               	andlw	15
  1494  007CBC  6E0D               	movwf	goto_XY@z^0,c
  1495  007CBE  EF12  F03E         	goto	l1318
  1496  007CC2                     l152:
  1497  007CC2                     l156:
  1498  007CC2  0012               	return		;funcret
  1499  007CC4                     __end_of_goto_XY:
  1500                           	opt callstack 0
  1501                           
  1502 ;; *************** function _lcd_cmd *****************
  1503 ;; Defined at:
  1504 ;;		line 68 in file "lcd.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  lcd             2    3[COMRAM] PTR struct .
  1507 ;;		 -> NULL(0), PORTD(1), 
  1508 ;;  a               1    5[COMRAM] unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         3       0       0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0       0       0
  1522 ;;      Temps:          1       0       0       0       0       0       0
  1523 ;;      Totals:         4       0       0       0       0       0       0
  1524 ;;Total ram usage:        4 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    1
  1527 ;; This function calls:
  1528 ;;		_pulso
  1529 ;; This function is called by:
  1530 ;;		_goto_XY
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text6
  1535  007790                     __ptext6:
  1536                           	opt callstack 0
  1537  007790                     _lcd_cmd:
  1538                           	opt callstack 27
  1539  007790                     
  1540                           ;lcd.c: 69:     lcd->RS = 0;
  1541  007790  C004  FFD9         	movff	lcd_cmd@lcd,fsr2l
  1542  007794  C005  FFDA         	movff	lcd_cmd@lcd+1,fsr2h
  1543  007798  90DF               	bcf	indf2,0,c
  1544  00779A                     
  1545                           ;lcd.c: 70:     lcd->data = (a);
  1546  00779A  C006  F007         	movff	lcd_cmd@a,??_lcd_cmd
  1547  00779E  C004  FFD9         	movff	lcd_cmd@lcd,fsr2l
  1548  0077A2  C005  FFDA         	movff	lcd_cmd@lcd+1,fsr2h
  1549  0077A6  3A07               	swapf	??_lcd_cmd^0,f,c
  1550  0077A8  50DF               	movf	indf2,w,c
  1551  0077AA  1807               	xorwf	??_lcd_cmd^0,w,c
  1552  0077AC  0B0F               	andlw	-241
  1553  0077AE  1807               	xorwf	??_lcd_cmd^0,w,c
  1554  0077B0  6EDF               	movwf	indf2,c
  1555  0077B2                     
  1556                           ;lcd.c: 71:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1557  0077B2  0E06               	movlw	6
  1558  0077B4  6E07               	movwf	??_lcd_cmd^0,c
  1559  0077B6  0E30               	movlw	48
  1560  0077B8                     u737:
  1561  0077B8  2EE8               	decfsz	wreg,f,c
  1562  0077BA  D7FE               	bra	u737
  1563  0077BC  2E07               	decfsz	??_lcd_cmd^0,f,c
  1564  0077BE  D7FC               	bra	u737
  1565  0077C0  D000               	nop2	
  1566  0077C2                     
  1567                           ;lcd.c: 73:     pulso(lcd);
  1568  0077C2  C004  F001         	movff	lcd_cmd@lcd,pulso@lcd
  1569  0077C6  C005  F002         	movff	lcd_cmd@lcd+1,pulso@lcd+1
  1570  0077CA  ECE8  F03B         	call	_pulso	;wreg free
  1571  0077CE  0012               	return		;funcret
  1572  0077D0                     __end_of_lcd_cmd:
  1573                           	opt callstack 0
  1574                           
  1575 ;; *************** function _clear_display *****************
  1576 ;; Defined at:
  1577 ;;		line 156 in file "lcd.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  lcd             2    3[COMRAM] PTR struct .
  1580 ;;		 -> NULL(0), PORTD(1), 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1592 ;;      Params:         2       0       0       0       0       0       0
  1593 ;;      Locals:         0       0       0       0       0       0       0
  1594 ;;      Temps:          1       0       0       0       0       0       0
  1595 ;;      Totals:         3       0       0       0       0       0       0
  1596 ;;Total ram usage:        3 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    1
  1599 ;; This function calls:
  1600 ;;		_pulso
  1601 ;; This function is called by:
  1602 ;;		_menu
  1603 ;;		_le_entrada
  1604 ;;		_creditos
  1605 ;;		_instrucoes
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text7
  1610  0078E6                     __ptext7:
  1611                           	opt callstack 0
  1612  0078E6                     _clear_display:
  1613                           	opt callstack 28
  1614  0078E6                     
  1615                           ;lcd.c: 157:     lcd->E = 0;
  1616  0078E6  C004  FFD9         	movff	clear_display@lcd,fsr2l
  1617  0078EA  C005  FFDA         	movff	clear_display@lcd+1,fsr2h
  1618  0078EE  94DF               	bcf	indf2,2,c
  1619                           
  1620                           ;lcd.c: 158:     lcd->RS = 0;
  1621  0078F0  C004  FFD9         	movff	clear_display@lcd,fsr2l
  1622  0078F4  C005  FFDA         	movff	clear_display@lcd+1,fsr2h
  1623  0078F8  90DF               	bcf	indf2,0,c
  1624                           
  1625                           ;lcd.c: 159:     lcd->R_W = 0;
  1626  0078FA  C004  FFD9         	movff	clear_display@lcd,fsr2l
  1627  0078FE  C005  FFDA         	movff	clear_display@lcd+1,fsr2h
  1628  007902  92DF               	bcf	indf2,1,c
  1629  007904                     
  1630                           ;lcd.c: 162:     lcd->data = 0x0;
  1631  007904  C004  FFD9         	movff	clear_display@lcd,fsr2l
  1632  007908  C005  FFDA         	movff	clear_display@lcd+1,fsr2h
  1633  00790C  0E0F               	movlw	-241
  1634  00790E  16DF               	andwf	indf2,f,c
  1635  007910                     
  1636                           ;lcd.c: 163:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1637  007910  0E06               	movlw	6
  1638  007912  6E06               	movwf	??_clear_display^0,c
  1639  007914  0E30               	movlw	48
  1640  007916                     u747:
  1641  007916  2EE8               	decfsz	wreg,f,c
  1642  007918  D7FE               	bra	u747
  1643  00791A  2E06               	decfsz	??_clear_display^0,f,c
  1644  00791C  D7FC               	bra	u747
  1645  00791E  D000               	nop2	
  1646  007920                     
  1647                           ;lcd.c: 165:     pulso(lcd);
  1648  007920  C004  F001         	movff	clear_display@lcd,pulso@lcd
  1649  007924  C005  F002         	movff	clear_display@lcd+1,pulso@lcd+1
  1650  007928  ECE8  F03B         	call	_pulso	;wreg free
  1651  00792C                     
  1652                           ;lcd.c: 168:     lcd->data = 0x1;
  1653  00792C  C004  FFD9         	movff	clear_display@lcd,fsr2l
  1654  007930  C005  FFDA         	movff	clear_display@lcd+1,fsr2h
  1655  007934  50DF               	movf	indf2,w,c
  1656  007936  0B0F               	andlw	-241
  1657  007938  0910               	iorlw	16
  1658  00793A  6EDF               	movwf	indf2,c
  1659  00793C                     
  1660                           ;lcd.c: 169:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1661  00793C  0E06               	movlw	6
  1662  00793E  6E06               	movwf	??_clear_display^0,c
  1663  007940  0E30               	movlw	48
  1664  007942                     u757:
  1665  007942  2EE8               	decfsz	wreg,f,c
  1666  007944  D7FE               	bra	u757
  1667  007946  2E06               	decfsz	??_clear_display^0,f,c
  1668  007948  D7FC               	bra	u757
  1669  00794A  D000               	nop2	
  1670  00794C                     
  1671                           ;lcd.c: 171:     pulso(lcd);
  1672  00794C  C004  F001         	movff	clear_display@lcd,pulso@lcd
  1673  007950  C005  F002         	movff	clear_display@lcd+1,pulso@lcd+1
  1674  007954  ECE8  F03B         	call	_pulso	;wreg free
  1675  007958  0012               	return		;funcret
  1676  00795A                     __end_of_clear_display:
  1677                           	opt callstack 0
  1678                           
  1679 ;; *************** function _function_set *****************
  1680 ;; Defined at:
  1681 ;;		line 22 in file "lcd.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  lcd             2    3[COMRAM] PTR struct .
  1684 ;;		 -> NULL(0), PORTD(1), 
  1685 ;;  data_lenght     1    5[COMRAM] unsigned char 
  1686 ;;  num_lines       1    6[COMRAM] unsigned char 
  1687 ;;  char_font       1    7[COMRAM] unsigned char 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;		None
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  1    wreg      void 
  1692 ;; Registers used:
  1693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1699 ;;      Params:         5       0       0       0       0       0       0
  1700 ;;      Locals:         0       0       0       0       0       0       0
  1701 ;;      Temps:          3       0       0       0       0       0       0
  1702 ;;      Totals:         8       0       0       0       0       0       0
  1703 ;;Total ram usage:        8 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    1
  1706 ;; This function calls:
  1707 ;;		_pulso
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text8
  1714  007CC4                     __ptext8:
  1715                           	opt callstack 0
  1716  007CC4                     _function_set:
  1717                           	opt callstack 29
  1718  007CC4                     
  1719                           ;lcd.c: 22: void function_set(t_display_port *lcd, char data_lenght,;lcd.c: 23:         
      +                          char num_lines, char char_font){;lcd.c: 24:     lcd->E = 0;
  1720  007CC4  C004  FFD9         	movff	function_set@lcd,fsr2l
  1721  007CC8  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1722  007CCC  94DF               	bcf	indf2,2,c
  1723                           
  1724                           ;lcd.c: 25:     lcd->RS = 0;
  1725  007CCE  C004  FFD9         	movff	function_set@lcd,fsr2l
  1726  007CD2  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1727  007CD6  90DF               	bcf	indf2,0,c
  1728                           
  1729                           ;lcd.c: 26:     lcd->R_W = 0;
  1730  007CD8  C004  FFD9         	movff	function_set@lcd,fsr2l
  1731  007CDC  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1732  007CE0  92DF               	bcf	indf2,1,c
  1733  007CE2                     
  1734                           ;lcd.c: 29:     lcd->data = 0x02;
  1735  007CE2  C004  FFD9         	movff	function_set@lcd,fsr2l
  1736  007CE6  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1737  007CEA  50DF               	movf	indf2,w,c
  1738  007CEC  0B0F               	andlw	-241
  1739  007CEE  0920               	iorlw	32
  1740  007CF0  6EDF               	movwf	indf2,c
  1741  007CF2                     
  1742                           ;lcd.c: 30:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1743  007CF2  0E06               	movlw	6
  1744  007CF4  6E09               	movwf	??_function_set^0,c
  1745  007CF6  0E30               	movlw	48
  1746  007CF8                     u767:
  1747  007CF8  2EE8               	decfsz	wreg,f,c
  1748  007CFA  D7FE               	bra	u767
  1749  007CFC  2E09               	decfsz	??_function_set^0,f,c
  1750  007CFE  D7FC               	bra	u767
  1751  007D00  D000               	nop2	
  1752  007D02                     
  1753                           ;lcd.c: 32:     pulso(lcd);
  1754  007D02  C004  F001         	movff	function_set@lcd,pulso@lcd
  1755  007D06  C005  F002         	movff	function_set@lcd+1,pulso@lcd+1
  1756  007D0A  ECE8  F03B         	call	_pulso	;wreg free
  1757  007D0E                     
  1758                           ;lcd.c: 35:     lcd->data = 0x02|data_lenght;
  1759  007D0E  C006  F009         	movff	function_set@data_lenght,??_function_set
  1760  007D12  0E02               	movlw	2
  1761  007D14  1209               	iorwf	??_function_set^0,f,c
  1762  007D16  C004  FFD9         	movff	function_set@lcd,fsr2l
  1763  007D1A  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1764  007D1E  3A09               	swapf	??_function_set^0,f,c
  1765  007D20  50DF               	movf	indf2,w,c
  1766  007D22  1809               	xorwf	??_function_set^0,w,c
  1767  007D24  0B0F               	andlw	-241
  1768  007D26  1809               	xorwf	??_function_set^0,w,c
  1769  007D28  6EDF               	movwf	indf2,c
  1770  007D2A                     
  1771                           ;lcd.c: 36:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1772  007D2A  0E06               	movlw	6
  1773  007D2C  6E09               	movwf	??_function_set^0,c
  1774  007D2E  0E30               	movlw	48
  1775  007D30                     u777:
  1776  007D30  2EE8               	decfsz	wreg,f,c
  1777  007D32  D7FE               	bra	u777
  1778  007D34  2E09               	decfsz	??_function_set^0,f,c
  1779  007D36  D7FC               	bra	u777
  1780  007D38  D000               	nop2	
  1781  007D3A                     
  1782                           ;lcd.c: 38:     pulso(lcd);
  1783  007D3A  C004  F001         	movff	function_set@lcd,pulso@lcd
  1784  007D3E  C005  F002         	movff	function_set@lcd+1,pulso@lcd+1
  1785  007D42  ECE8  F03B         	call	_pulso	;wreg free
  1786  007D46                     
  1787                           ;lcd.c: 42:     lcd->data = lcd->data|(num_lines<<3)|(char_font<<2);
  1788  007D46  C004  FFD9         	movff	function_set@lcd,fsr2l
  1789  007D4A  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1790  007D4E  38DF               	swapf	indf2,w,c
  1791  007D50  0B0F               	andlw	15
  1792  007D52  6E09               	movwf	??_function_set^0,c
  1793  007D54  C008  F00A         	movff	function_set@char_font,??_function_set+1
  1794  007D58  90D8               	bcf	status,0,c
  1795  007D5A  360A               	rlcf	(??_function_set+1)^0,f,c
  1796  007D5C  90D8               	bcf	status,0,c
  1797  007D5E  360A               	rlcf	(??_function_set+1)^0,f,c
  1798  007D60  3807               	swapf	function_set@num_lines^0,w,c
  1799  007D62  42E8               	rrncf	wreg,f,c
  1800  007D64  0BF8               	andlw	248
  1801  007D66  100A               	iorwf	(??_function_set+1)^0,w,c
  1802  007D68  1009               	iorwf	??_function_set^0,w,c
  1803  007D6A  6E0B               	movwf	(??_function_set+2)^0,c
  1804  007D6C  C004  FFD9         	movff	function_set@lcd,fsr2l
  1805  007D70  C005  FFDA         	movff	function_set@lcd+1,fsr2h
  1806  007D74  3A0B               	swapf	(??_function_set+2)^0,f,c
  1807  007D76  50DF               	movf	indf2,w,c
  1808  007D78  180B               	xorwf	(??_function_set+2)^0,w,c
  1809  007D7A  0B0F               	andlw	-241
  1810  007D7C  180B               	xorwf	(??_function_set+2)^0,w,c
  1811  007D7E  6EDF               	movwf	indf2,c
  1812  007D80                     
  1813                           ;lcd.c: 43:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1814  007D80  0E06               	movlw	6
  1815  007D82  6E09               	movwf	??_function_set^0,c
  1816  007D84  0E30               	movlw	48
  1817  007D86                     u787:
  1818  007D86  2EE8               	decfsz	wreg,f,c
  1819  007D88  D7FE               	bra	u787
  1820  007D8A  2E09               	decfsz	??_function_set^0,f,c
  1821  007D8C  D7FC               	bra	u787
  1822  007D8E  D000               	nop2	
  1823  007D90                     
  1824                           ;lcd.c: 45:     pulso(lcd);
  1825  007D90  C004  F001         	movff	function_set@lcd,pulso@lcd
  1826  007D94  C005  F002         	movff	function_set@lcd+1,pulso@lcd+1
  1827  007D98  ECE8  F03B         	call	_pulso	;wreg free
  1828  007D9C  0012               	return		;funcret
  1829  007D9E                     __end_of_function_set:
  1830                           	opt callstack 0
  1831                           
  1832 ;; *************** function _entry_mode_set *****************
  1833 ;; Defined at:
  1834 ;;		line 120 in file "lcd.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  lcd             2    3[COMRAM] PTR struct .
  1837 ;;		 -> NULL(0), PORTD(1), 
  1838 ;;  move_directi    1    5[COMRAM] unsigned char 
  1839 ;;  display_shif    1    6[COMRAM] unsigned char 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1851 ;;      Params:         4       0       0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0
  1853 ;;      Temps:          1       0       0       0       0       0       0
  1854 ;;      Totals:         5       0       0       0       0       0       0
  1855 ;;Total ram usage:        5 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    1
  1858 ;; This function calls:
  1859 ;;		_pulso
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text9
  1866  0079DA                     __ptext9:
  1867                           	opt callstack 0
  1868  0079DA                     _entry_mode_set:
  1869                           	opt callstack 29
  1870  0079DA                     
  1871                           ;lcd.c: 121:     lcd->E = 0;
  1872  0079DA  C004  FFD9         	movff	entry_mode_set@lcd,fsr2l
  1873  0079DE  C005  FFDA         	movff	entry_mode_set@lcd+1,fsr2h
  1874  0079E2  94DF               	bcf	indf2,2,c
  1875                           
  1876                           ;lcd.c: 122:     lcd->RS = 0;
  1877  0079E4  C004  FFD9         	movff	entry_mode_set@lcd,fsr2l
  1878  0079E8  C005  FFDA         	movff	entry_mode_set@lcd+1,fsr2h
  1879  0079EC  90DF               	bcf	indf2,0,c
  1880                           
  1881                           ;lcd.c: 123:     lcd->R_W = 0;
  1882  0079EE  C004  FFD9         	movff	entry_mode_set@lcd,fsr2l
  1883  0079F2  C005  FFDA         	movff	entry_mode_set@lcd+1,fsr2h
  1884  0079F6  92DF               	bcf	indf2,1,c
  1885  0079F8                     
  1886                           ;lcd.c: 125:     lcd->data = 0x00;
  1887  0079F8  C004  FFD9         	movff	entry_mode_set@lcd,fsr2l
  1888  0079FC  C005  FFDA         	movff	entry_mode_set@lcd+1,fsr2h
  1889  007A00  0E0F               	movlw	-241
  1890  007A02  16DF               	andwf	indf2,f,c
  1891  007A04                     
  1892                           ;lcd.c: 126:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1893  007A04  0E06               	movlw	6
  1894  007A06  6E08               	movwf	??_entry_mode_set^0,c
  1895  007A08  0E30               	movlw	48
  1896  007A0A                     u797:
  1897  007A0A  2EE8               	decfsz	wreg,f,c
  1898  007A0C  D7FE               	bra	u797
  1899  007A0E  2E08               	decfsz	??_entry_mode_set^0,f,c
  1900  007A10  D7FC               	bra	u797
  1901  007A12  D000               	nop2	
  1902  007A14                     
  1903                           ;lcd.c: 128:     pulso(lcd);
  1904  007A14  C004  F001         	movff	entry_mode_set@lcd,pulso@lcd
  1905  007A18  C005  F002         	movff	entry_mode_set@lcd+1,pulso@lcd+1
  1906  007A1C  ECE8  F03B         	call	_pulso	;wreg free
  1907  007A20                     
  1908                           ;lcd.c: 131:     lcd->data = 0x04|(move_direction<<1)|display_shift;
  1909  007A20  5006               	movf	entry_mode_set@move_direction^0,w,c
  1910  007A22  2406               	addwf	entry_mode_set@move_direction^0,w,c
  1911  007A24  1007               	iorwf	entry_mode_set@display_shift^0,w,c
  1912  007A26  6E08               	movwf	??_entry_mode_set^0,c
  1913  007A28  0E04               	movlw	4
  1914  007A2A  1208               	iorwf	??_entry_mode_set^0,f,c
  1915  007A2C  C004  FFD9         	movff	entry_mode_set@lcd,fsr2l
  1916  007A30  C005  FFDA         	movff	entry_mode_set@lcd+1,fsr2h
  1917  007A34  3A08               	swapf	??_entry_mode_set^0,f,c
  1918  007A36  50DF               	movf	indf2,w,c
  1919  007A38  1808               	xorwf	??_entry_mode_set^0,w,c
  1920  007A3A  0B0F               	andlw	-241
  1921  007A3C  1808               	xorwf	??_entry_mode_set^0,w,c
  1922  007A3E  6EDF               	movwf	indf2,c
  1923  007A40                     
  1924                           ;lcd.c: 132:     _delay((unsigned long)((1)*(16000000/4000.0)));
  1925  007A40  0E06               	movlw	6
  1926  007A42  6E08               	movwf	??_entry_mode_set^0,c
  1927  007A44  0E30               	movlw	48
  1928  007A46                     u807:
  1929  007A46  2EE8               	decfsz	wreg,f,c
  1930  007A48  D7FE               	bra	u807
  1931  007A4A  2E08               	decfsz	??_entry_mode_set^0,f,c
  1932  007A4C  D7FC               	bra	u807
  1933  007A4E  D000               	nop2	
  1934  007A50                     
  1935                           ;lcd.c: 134:     pulso(lcd);
  1936  007A50  C004  F001         	movff	entry_mode_set@lcd,pulso@lcd
  1937  007A54  C005  F002         	movff	entry_mode_set@lcd+1,pulso@lcd+1
  1938  007A58  ECE8  F03B         	call	_pulso	;wreg free
  1939  007A5C  0012               	return		;funcret
  1940  007A5E                     __end_of_entry_mode_set:
  1941                           	opt callstack 0
  1942                           
  1943 ;; *************** function _display_onoff_control *****************
  1944 ;; Defined at:
  1945 ;;		line 48 in file "lcd.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  lcd             2    3[COMRAM] PTR struct .
  1948 ;;		 -> NULL(0), PORTD(1), 
  1949 ;;  display_on      1    5[COMRAM] unsigned char 
  1950 ;;  cursor_on       1    6[COMRAM] unsigned char 
  1951 ;;  blink           1    7[COMRAM] unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1963 ;;      Params:         5       0       0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0
  1965 ;;      Temps:          2       0       0       0       0       0       0
  1966 ;;      Totals:         7       0       0       0       0       0       0
  1967 ;;Total ram usage:        7 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    1
  1970 ;; This function calls:
  1971 ;;		_pulso
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text10
  1978  007AE2                     __ptext10:
  1979                           	opt callstack 0
  1980  007AE2                     _display_onoff_control:
  1981                           	opt callstack 29
  1982  007AE2                     
  1983                           ;lcd.c: 48: void display_onoff_control(t_display_port *lcd, char display_on,;lcd.c: 49: 
      +                                  char cursor_on, char blink){;lcd.c: 50:     lcd->E = 0;
  1984  007AE2  C004  FFD9         	movff	display_onoff_control@lcd,fsr2l
  1985  007AE6  C005  FFDA         	movff	display_onoff_control@lcd+1,fsr2h
  1986  007AEA  94DF               	bcf	indf2,2,c
  1987                           
  1988                           ;lcd.c: 51:     lcd->RS = 0;
  1989  007AEC  C004  FFD9         	movff	display_onoff_control@lcd,fsr2l
  1990  007AF0  C005  FFDA         	movff	display_onoff_control@lcd+1,fsr2h
  1991  007AF4  90DF               	bcf	indf2,0,c
  1992                           
  1993                           ;lcd.c: 52:     lcd->R_W = 0;
  1994  007AF6  C004  FFD9         	movff	display_onoff_control@lcd,fsr2l
  1995  007AFA  C005  FFDA         	movff	display_onoff_control@lcd+1,fsr2h
  1996  007AFE  92DF               	bcf	indf2,1,c
  1997  007B00                     
  1998                           ;lcd.c: 55:     lcd->data = 0x00;
  1999  007B00  C004  FFD9         	movff	display_onoff_control@lcd,fsr2l
  2000  007B04  C005  FFDA         	movff	display_onoff_control@lcd+1,fsr2h
  2001  007B08  0E0F               	movlw	-241
  2002  007B0A  16DF               	andwf	indf2,f,c
  2003  007B0C                     
  2004                           ;lcd.c: 56:     _delay((unsigned long)((1)*(16000000/4000.0)));
  2005  007B0C  0E06               	movlw	6
  2006  007B0E  6E09               	movwf	??_display_onoff_control^0,c
  2007  007B10  0E30               	movlw	48
  2008  007B12                     u817:
  2009  007B12  2EE8               	decfsz	wreg,f,c
  2010  007B14  D7FE               	bra	u817
  2011  007B16  2E09               	decfsz	??_display_onoff_control^0,f,c
  2012  007B18  D7FC               	bra	u817
  2013  007B1A  D000               	nop2	
  2014  007B1C                     
  2015                           ;lcd.c: 58:     pulso(lcd);
  2016  007B1C  C004  F001         	movff	display_onoff_control@lcd,pulso@lcd
  2017  007B20  C005  F002         	movff	display_onoff_control@lcd+1,pulso@lcd+1
  2018  007B24  ECE8  F03B         	call	_pulso	;wreg free
  2019  007B28                     
  2020                           ;lcd.c: 62:     lcd->data = (0x08)|(display_on<<2)|(cursor_on<<1)|(blink);
  2021  007B28  90D8               	bcf	status,0,c
  2022  007B2A  3407               	rlcf	display_onoff_control@cursor_on^0,w,c
  2023  007B2C  6E09               	movwf	??_display_onoff_control^0,c
  2024  007B2E  4406               	rlncf	display_onoff_control@display_on^0,w,c
  2025  007B30  46E8               	rlncf	wreg,f,c
  2026  007B32  0BFC               	andlw	252
  2027  007B34  1009               	iorwf	??_display_onoff_control^0,w,c
  2028  007B36  1008               	iorwf	display_onoff_control@blink^0,w,c
  2029  007B38  6E0A               	movwf	(??_display_onoff_control+1)^0,c
  2030  007B3A  0E08               	movlw	8
  2031  007B3C  120A               	iorwf	(??_display_onoff_control+1)^0,f,c
  2032  007B3E  C004  FFD9         	movff	display_onoff_control@lcd,fsr2l
  2033  007B42  C005  FFDA         	movff	display_onoff_control@lcd+1,fsr2h
  2034  007B46  3A0A               	swapf	(??_display_onoff_control+1)^0,f,c
  2035  007B48  50DF               	movf	indf2,w,c
  2036  007B4A  180A               	xorwf	(??_display_onoff_control+1)^0,w,c
  2037  007B4C  0B0F               	andlw	-241
  2038  007B4E  180A               	xorwf	(??_display_onoff_control+1)^0,w,c
  2039  007B50  6EDF               	movwf	indf2,c
  2040  007B52                     
  2041                           ;lcd.c: 63:     _delay((unsigned long)((1)*(16000000/4000.0)));
  2042  007B52  0E06               	movlw	6
  2043  007B54  6E09               	movwf	??_display_onoff_control^0,c
  2044  007B56  0E30               	movlw	48
  2045  007B58                     u827:
  2046  007B58  2EE8               	decfsz	wreg,f,c
  2047  007B5A  D7FE               	bra	u827
  2048  007B5C  2E09               	decfsz	??_display_onoff_control^0,f,c
  2049  007B5E  D7FC               	bra	u827
  2050  007B60  D000               	nop2	
  2051  007B62                     
  2052                           ;lcd.c: 65:     pulso(lcd);
  2053  007B62  C004  F001         	movff	display_onoff_control@lcd,pulso@lcd
  2054  007B66  C005  F002         	movff	display_onoff_control@lcd+1,pulso@lcd+1
  2055  007B6A  ECE8  F03B         	call	_pulso	;wreg free
  2056  007B6E  0012               	return		;funcret
  2057  007B70                     __end_of_display_onoff_control:
  2058                           	opt callstack 0
  2059                           
  2060 ;; *************** function _pulso *****************
  2061 ;; Defined at:
  2062 ;;		line 11 in file "lcd.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  lcd             2    0[COMRAM] PTR struct .
  2065 ;;		 -> NULL(0), PORTD(1), 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2077 ;;      Params:         2       0       0       0       0       0       0
  2078 ;;      Locals:         0       0       0       0       0       0       0
  2079 ;;      Temps:          1       0       0       0       0       0       0
  2080 ;;      Totals:         3       0       0       0       0       0       0
  2081 ;;Total ram usage:        3 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_function_set
  2087 ;;		_display_onoff_control
  2088 ;;		_lcd_cmd
  2089 ;;		_entry_mode_set
  2090 ;;		_write_char
  2091 ;;		_clear_display
  2092 ;;		_return_home
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text11
  2097  0077D0                     __ptext11:
  2098                           	opt callstack 0
  2099  0077D0                     _pulso:
  2100                           	opt callstack 28
  2101  0077D0                     
  2102                           ;lcd.c: 13:     lcd->E = 1;
  2103  0077D0  C001  FFD9         	movff	pulso@lcd,fsr2l
  2104  0077D4  C002  FFDA         	movff	pulso@lcd+1,fsr2h
  2105  0077D8  84DF               	bsf	indf2,2,c
  2106  0077DA                     
  2107                           ;lcd.c: 14:     _delay((unsigned long)((1)*(16000000/4000.0)));
  2108  0077DA  0E06               	movlw	6
  2109  0077DC  6E03               	movwf	??_pulso^0,c
  2110  0077DE  0E30               	movlw	48
  2111  0077E0                     u837:
  2112  0077E0  2EE8               	decfsz	wreg,f,c
  2113  0077E2  D7FE               	bra	u837
  2114  0077E4  2E03               	decfsz	??_pulso^0,f,c
  2115  0077E6  D7FC               	bra	u837
  2116  0077E8  D000               	nop2	
  2117  0077EA                     
  2118                           ;lcd.c: 17:     lcd->E = 0;
  2119  0077EA  C001  FFD9         	movff	pulso@lcd,fsr2l
  2120  0077EE  C002  FFDA         	movff	pulso@lcd+1,fsr2h
  2121  0077F2  94DF               	bcf	indf2,2,c
  2122                           
  2123                           ;lcd.c: 18:     _delay((unsigned long)((5)*(16000000/4000.0)));
  2124  0077F4  0E1A               	movlw	26
  2125  0077F6  6E03               	movwf	??_pulso^0,c
  2126  0077F8  0EF8               	movlw	248
  2127  0077FA                     u847:
  2128  0077FA  2EE8               	decfsz	wreg,f,c
  2129  0077FC  D7FE               	bra	u847
  2130  0077FE  2E03               	decfsz	??_pulso^0,f,c
  2131  007800  D7FC               	bra	u847
  2132  007802  D000               	nop2	
  2133  007804                     
  2134                           ;lcd.c: 19:     lcd->data = 0x00;
  2135  007804  C001  FFD9         	movff	pulso@lcd,fsr2l
  2136  007808  C002  FFDA         	movff	pulso@lcd+1,fsr2h
  2137  00780C  0E0F               	movlw	-241
  2138  00780E  16DF               	andwf	indf2,f,c
  2139  007810  0012               	return		;funcret
  2140  007812                     __end_of_pulso:
  2141                           	opt callstack 0
  2142  0000                     
  2143                           	psect	rparam
  2144  0000                     tosu	equ	0xFFF
  2145                           tosh	equ	0xFFE
  2146                           tosl	equ	0xFFD
  2147                           stkptr	equ	0xFFC
  2148                           pclatu	equ	0xFFB
  2149                           pclath	equ	0xFFA
  2150                           pcl	equ	0xFF9
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           indf0	equ	0xFEF
  2158                           postinc0	equ	0xFEE
  2159                           postdec0	equ	0xFED
  2160                           preinc0	equ	0xFEC
  2161                           plusw0	equ	0xFEB
  2162                           fsr0h	equ	0xFEA
  2163                           fsr0l	equ	0xFE9
  2164                           wreg	equ	0xFE8
  2165                           indf1	equ	0xFE7
  2166                           postinc1	equ	0xFE6
  2167                           postdec1	equ	0xFE5
  2168                           preinc1	equ	0xFE4
  2169                           plusw1	equ	0xFE3
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           bsr	equ	0xFE0
  2173                           indf2	equ	0xFDF
  2174                           postinc2	equ	0xFDE
  2175                           postdec2	equ	0xFDD
  2176                           preinc2	equ	0xFDC
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        160
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    101     119
    BANK0           128      0     128
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> menu@palavra4(COMRAM[16]), menu@palavra3(COMRAM[16]), menu@palavra2(COMRAM[16]), menu@palavra(COMRAM[16]), 
		 -> instrucoes@palavra4(COMRAM[16]), instrucoes@palavra3(COMRAM[16]), instrucoes@palavra2(COMRAM[16]), instrucoes@palavra(COMRAM[16]), 
		 -> creditos@palavra2(COMRAM[16]), creditos@palavra(COMRAM[16]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> menu@palavra4(COMRAM[16]), menu@palavra3(COMRAM[16]), menu@palavra2(COMRAM[16]), menu@palavra(COMRAM[16]), 
		 -> instrucoes@palavra4(COMRAM[16]), instrucoes@palavra3(COMRAM[16]), instrucoes@palavra2(COMRAM[16]), instrucoes@palavra(COMRAM[16]), 
		 -> creditos@palavra2(COMRAM[16]), creditos@palavra(COMRAM[16]), 

    clear_display@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    write_char@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    entry_mode_set@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    goto_XY@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    lcd_cmd@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    display_onoff_control@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    function_set@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    pulso@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    menu@lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    lcd	PTR struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_menu
    _menu->_goto_XY
    _le_entrada->_goto_XY
    _write_char->_pulso
    _goto_XY->_lcd_cmd
    _lcd_cmd->_pulso
    _clear_display->_pulso
    _function_set->_pulso
    _entry_mode_set->_pulso
    _display_onoff_control->_pulso

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   30183
              _display_onoff_control
                     _entry_mode_set
                       _function_set
                         _le_entrada
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                86    84      2   13541
                                             15 COMRAM    86    84      2
                      _clear_display
                            _goto_XY
                             _strlen
                         _write_char
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     850
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _le_entrada                                           2     2      0   11712
                                             15 COMRAM     2     2      0
                      _clear_display
                            _goto_XY
                         _write_char
 ---------------------------------------------------------------------------------
 (2) _write_char                                           4     1      3    3478
                                              3 COMRAM     4     1      3
                              _pulso
 ---------------------------------------------------------------------------------
 (2) _goto_XY                                              8     4      4    6342
                                              7 COMRAM     8     4      4
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              4     1      3    2434
                                              3 COMRAM     4     1      3
                              _pulso
 ---------------------------------------------------------------------------------
 (2) _clear_display                                        3     1      2    1892
                                              3 COMRAM     3     1      2
                              _pulso
 ---------------------------------------------------------------------------------
 (1) _function_set                                         8     3      5    1720
                                              3 COMRAM     8     3      5
                              _pulso
 ---------------------------------------------------------------------------------
 (1) _entry_mode_set                                       5     1      4    1556
                                              3 COMRAM     5     1      4
                              _pulso
 ---------------------------------------------------------------------------------
 (1) _display_onoff_control                                7     2      5    1654
                                              3 COMRAM     7     2      5
                              _pulso
 ---------------------------------------------------------------------------------
 (3) _pulso                                                3     1      2    1130
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display_onoff_control
     _pulso
   _entry_mode_set
     _pulso
   _function_set
     _pulso
   _le_entrada
     _clear_display
       _pulso
     _goto_XY
       _lcd_cmd
         _pulso
     _write_char
       _pulso
   _menu
     _clear_display
       _pulso
     _goto_XY
       _lcd_cmd
         _pulso
     _strlen
     _write_char
       _pulso

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      10       7        6.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     65      77       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     107      15        0.0%
DATA                 0      0     107       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jun 10 13:19:31 2020

         ?_display_onoff_control 0004                      __CFG_OSC$HS 000000  
                            l140 7D9C                              l132 7FFE  
                            l143 7B6E                              l152 7CC2  
                            l137 7810                              l146 77CE  
                            l162 7C06                              l156 7CC2  
                            l165 7958                              l159 7A5C  
                            l184 787A                              l864 778E  
                            u401 7DA8                              u411 7DCE  
                            u421 7DF4                              u350 7782  
                            u351 777E                              u431 7E1A  
                            u360 7C18                              u440 7E94  
                            u361 7C14                              u441 7E90  
                            u370 7C6E                              u450 7EF2  
                            u371 7C6A                              u451 7EEE  
                            u380 7C90                              u460 7F50  
                            u381 7C8C                              u461 7F4C  
                            u390 7CB2                              u470 7FAE  
                            u391 7CAE                              u471 7FAA  
                            u480 7832                              u481 782E  
                            u707 7BB2                              u717 7BE6  
                            u807 7A46                              u727 7C3E  
                            u817 7B12                              u737 77B8  
                            u827 7B58                              u747 7916  
                            u837 77E0                              u757 7942  
                            u847 77FA                              u767 7CF8  
                            u777 7D30                              u697 7860  
                            u787 7D86                              u797 7A0A  
                            _lcd 0076                              wreg 000FE8  
                  write_char@lcd 0004                    creditos@F3056 0066  
                  creditos@F3059 00F0                     __CFG_WDT$OFF 000000  
                           l1300 77B2                             l1302 77C2  
                           l1310 7782                             l1400 7D2A  
                           l1320 7C28                             l1304 775A  
                           l1410 7AE2                             l1402 7D3A  
                           l1322 7C38                             l1314 7C08  
                           l1306 7766                             l1420 7B52  
                           l1412 7B00                             l1404 7D46  
                           l1340 7C90                             l1324 7C48  
                           l1316 7C18                             l1308 776A  
                           l1422 7B62                             l1414 7B0C  
                           l1430 7A14                             l1406 7D80  
                           l1350 7CA0                             l1318 7C24  
                           l1326 7C5C                             l1510 781E  
                           l1502 7FC2                             l1416 7B1C  
                           l1432 7A20                             l1424 79DA  
                           l1408 7D90                             l1352 7CB2  
                           l1328 7C6E                             l1520 7856  
                           l1512 7820                             l1440 7DB0  
                           l1290 77DA                             l1418 7B28  
                           l1434 7A40                             l1426 79F8  
                           l1338 7C7E                             l1370 7BC8  
                           l1362 7B70                             l1522 786E  
                           l1514 7822                             l1450 7E36  
                           l1442 7DC4                             l1530 7A7A  
                           l1292 77EA                             l1436 7A50  
                           l1428 7A04                             l1380 7910  
                           l1372 7BE0                             l1364 7B8E  
                           l1516 7824                             l1508 7812  
                           l1460 7E94                             l1452 7E4A  
                           l1444 7DEA                             l1540 7AC8  
                           l1532 7A7C                             l1524 7A5E  
                           l1294 7804                             l1390 7CC4  
                           l1382 7920                             l1374 7BF0  
                           l1366 7BAC                             l1518 7832  
                           l1710 7FD8                             l1470 7EF2  
                           l1462 7EA8                             l1454 7E56  
                           l1446 7DFC                             l1438 7D9E  
                           l1542 7ACA                             l1534 7A84  
                           l1526 7A62                             l1288 77D0  
                           l1392 7CE2                             l1384 792C  
                           l1376 78E6                             l1296 7790  
                           l1368 7BBC                             l1480 7F50  
                           l1472 7F06                             l1464 7EB4  
                           l1456 7E72                             l1448 7E22  
                           l1544 7AD6                             l1536 7A9C  
                           l1528 7A64                             l1394 7CF2  
                           l1386 793C                             l1378 7904  
                           l1298 779A                             l1490 7FAE  
                           l1482 7F64                             l1474 7F12  
                           l1466 7ED0                             l1458 7E76  
                           l1538 7AB4                             l1396 7D02  
                           l1388 794C                             l1492 7FB2  
                           l1484 7F70                             l1476 7F2E  
                           l1468 7ED4                             l1398 7D0E  
                           l1486 7F8C                             l1478 7F32  
                           l1488 7F90                             _TMR0 000FD6  
                           _main 7A5E                             _menu 7D9E  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           start 0000            function_set@num_lines 0007  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
                function_set@lcd 0004                            ?_main 0001  
                          ?_menu 0010                            _CMCON 000FB4  
                          _PORTD 000F83                            _TRISB 000F93  
                          _TRISD 000F95                  __end_of_lcd_cmd 77D0  
                __end_of_goto_XY 7CC4                            _pulso 77D0  
                          menu@i 005E                            tablat 000FF5  
                          plusw1 000FE3                            plusw2 000FDB  
                          status 000FD8                  __initialization 787C  
                   __end_of_main 7AE2                     __end_of_menu 8000  
                         ??_main 0066                           ??_menu 0012  
                  __activetblptr 000002                           _ADCON1 000FC1  
                         ?_pulso 0001                      menu@palavra 0014  
          __end_of_clear_display 795A                      menu@tamanho 0054  
                    goto_XY@temp 000F                    ?_function_set 0004  
                      ??_lcd_cmd 0007                           _strlen 775A  
                      ??_goto_XY 000C                     __pdataCOMRAM 0066  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8         display_onoff_control@lcd 0004  
                     __accesstop 0080          __end_of__initialization 78DC  
                  ___rparam_used 000001          ??_display_onoff_control 0009  
                 __pcstackCOMRAM 0001                     __pidataBANK0 795A  
                   __pidataBANK1 773A                    __end_of_pulso 7812  
                 ??_function_set 0009                          ??_pulso 0003  
                     __pnvCOMRAM 0076                          ?_strlen 0001  
    entry_mode_set@display_shift 0007                     menu@palavra2 0024  
                   menu@palavra3 0034                     menu@palavra4 0044  
                     _le_entrada 7812                     menu@tamanho2 0056  
                   menu@tamanho3 0058                     menu@tamanho4 005A  
        __size_of_entry_mode_set 0084                          __Hparam 0000  
 display_onoff_control@cursor_on 0007                          __Lparam 0000  
                        __pcinit 787C                          __ramtop 0600  
                        __ptext0 7A5E                          __ptext1 7D9E  
                        __ptext2 775A                          __ptext3 7812  
                        __ptext4 7B70                          __ptext5 7C08  
                        __ptext6 7790                          __ptext7 78E6  
                        __ptext8 7CC4                          __ptext9 79DA  
                        _lcd_cmd 7790                        _T0CONbits 000FD5  
                __size_of_strlen 0036                          _goto_XY 7C08  
           end_of_initialization 78DC                          menu@lcd 0010  
           __end_of_function_set 7D9E                    __Lmediumconst 0000  
                        postdec1 000FE5                          postinc0 000FEE  
                        strlen@a 0003                          strlen@s 0001  
                      _PORTBbits 000F81                       lcd_cmd@lcd 0004  
                    ?_le_entrada 0001   __size_of_display_onoff_control 008E  
  __end_of_display_onoff_control 7B70                       _write_char 7B70  
                  __pidataCOMRAM 774A           __size_of_clear_display 0074  
                 __end_of_strlen 7790              start_initialization 787C  
                 _entry_mode_set 79DA                       goto_XY@lcd 0008  
                    __pdataBANK0 0080                      __pdataBANK1 0100  
            __size_of_le_entrada 006A                         ??_strlen 0003  
          __size_of_function_set 00DA                  instrucoes@F3083 00E0  
                instrucoes@F3092 00B0                  instrucoes@F3086 00D0  
                instrucoes@F3089 00C0           __end_of_entry_mode_set 7A5E  
                  _clear_display 78E6                      ?_write_char 0004  
                       ?_lcd_cmd 0004                     _function_set 7CC4  
                       ?_goto_XY 0008                 clear_display@lcd 0004  
                 __size_of_pulso 0042                  ?_entry_mode_set 0004  
                 ?_clear_display 0004     entry_mode_set@move_direction 0006  
display_onoff_control@display_on 0006       display_onoff_control@blink 0008  
                    write_char@c 0006                        menu@F3101 00A0  
                      menu@F3110 0100                        menu@F3104 0090  
                      menu@F3107 0080                     ??_le_entrada 0010  
                      copy_data0 7890                        copy_data1 78B0  
                      copy_data2 78D0              __size_of_write_char 0098  
                      menu@i_264 0060                        menu@i_265 0062  
                      menu@i_266 0064                         __Hrparam 0000  
                       __Lrparam 0000                entry_mode_set@lcd 0004  
             __end_of_le_entrada 787C                 __size_of_lcd_cmd 0040  
               __size_of_goto_XY 00BC                         __ptext10 7AE2  
                       __ptext11 77D0                  ??_clear_display 0006  
                  __size_of_main 0084                    __size_of_menu 0262  
                       lcd_cmd@a 0006            _display_onoff_control 7AE2  
                     _INTCONbits 000FF2                         goto_XY@a 000E  
                       goto_XY@x 000A                         goto_XY@y 000B  
                       goto_XY@z 000D          function_set@data_lenght 0006  
                   ??_write_char 0007                         pulso@lcd 0001  
               ??_entry_mode_set 0008            function_set@char_font 0008  
             __end_of_write_char 7C08  
